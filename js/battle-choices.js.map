{"version":3,"sources":["../src/battle-choices.ts"],"names":["BattleChoiceBuilder","request","choices","current","choiceType","move","targetLoc","mega","ultra","z","max","alreadySwitchingIn","alreadyMega","alreadyMax","alreadyZ","fillPasses","toString","concat","stringChoice","join","replace","isDone","length","requestLength","isEmpty","choice","index","requestType","active","forceSwitch","maxTeamSize","currentMoveRequest","addChoice","choiceString","parseChoice","err","message","choosableTargets","includes","getChosenMove","target","targetPokemon","i","splice","push","pokemonIndex","activePokemon","moveIndex","zMoves","maxMoves","canDynamax","moves","Error","startsWith","moveRequest","slice","test","toID","parseInt","trim","endsWith","moveid","id","isTeamPreview","lowerChoice","toLowerCase","choiceid","matchLevel","match","side","pokemon","serverPokemon","curMatchLevel","name","speciesForme","Dex","getSpecies","baseSpecies","fainted","boost","fixRequest","battle","teamPreview","wait","noCancel","parseDetails","ident","substr","details","parseHealth","condition","map","canGigantamax","gigantamax","getMove","canZMove"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FMA,mB;;;;;;;;;;;;;;;;;;;;AAoBL,6BAAYC,OAAZ,CAAoC,MAjBpCC,OAiBoC,CAjBhB,EAiBgB,MAfpCC,OAeoC,CAfR,CAC3BC,UAAU,CAAE,MADe,CAG3BC,IAAI,CAAE,CAHqB,CAI3BC,SAAS,CAAE,CAJgB,CAK3BC,IAAI,CAAE,KALqB,CAM3BC,KAAK,CAAE,KANoB,CAO3BC,CAAC,CAAE,KAPwB,CAQ3BC,GAAG,CAAE,KARsB,CAeQ,MALpCC,kBAKoC,CALL,EAKK,MAJpCC,WAIoC,CAJtB,KAIsB,MAHpCC,UAGoC,CAHvB,KAGuB,MAFpCC,QAEoC,CAFzB,KAEyB;AACnC,KAAKb,OAAL,CAAeA,OAAf;AACA,KAAKc,UAAL;AACA,C;;AAEDC,Q,CAAA,mBAAW;AACV,GAAId,CAAAA,OAAO,CAAG,KAAKA,OAAnB;AACA,GAAI,KAAKC,OAAL,CAAaE,IAAjB,CAAuBH,OAAO,CAAGA,OAAO,CAACe,MAAR,CAAe,KAAKC,YAAL,CAAkB,KAAKf,OAAvB,CAAf,CAAV;AACvB,MAAOD,CAAAA,OAAO,CAACiB,IAAR,CAAa,IAAb,EAAmBC,OAAnB,CAA2B,UAA3B,CAAuC,IAAvC,CAAP;AACA,C;;AAEDC,M,CAAA,iBAAS;AACR,MAAO,MAAKnB,OAAL,CAAaoB,MAAb,EAAuB,KAAKC,aAAL,EAA9B;AACA,C;AACDC,O,CAAA,kBAAU;AACY,KAAKtB,OADjB,8BAC0B,CAA9B,GAAMuB,CAAAA,MAAM,kBAAZ;AACJ,GAAIA,MAAM,GAAK,MAAf,CAAuB,MAAO,MAAP;AACvB;AACD,GAAI,KAAKtB,OAAL,CAAaE,IAAjB,CAAuB,MAAO,MAAP;AACvB,MAAO,KAAP;AACA,C;;;AAGDqB,K,CAAA,gBAAQ;AACP,MAAO,MAAKxB,OAAL,CAAaoB,MAApB;AACA,C;;AAEDC,a,CAAA,wBAAgB;AACf,GAAMtB,CAAAA,OAAO,CAAG,KAAKA,OAArB;AACA,OAAQA,OAAO,CAAC0B,WAAhB;AACA,IAAK,MAAL;AACC,MAAO1B,CAAAA,OAAO,CAAC2B,MAAR,CAAeN,MAAtB;AACD,IAAK,QAAL;AACC,MAAOrB,CAAAA,OAAO,CAAC4B,WAAR,CAAoBP,MAA3B;AACD,IAAK,MAAL;AACC,GAAIrB,OAAO,CAAC6B,WAAZ,CAAyB,MAAO7B,CAAAA,OAAO,CAAC6B,WAAf;AACzB,MAAO,EAAP;AACD,IAAK,MAAL;AACC,MAAO,EAAP,CATD;;AAWA,C;AACDC,kB,CAAA,6BAAqB;AACpB,GAAI,KAAK9B,OAAL,CAAa0B,WAAb,GAA6B,MAAjC,CAAyC,MAAO,KAAP;AACzC,MAAO,MAAK1B,OAAL,CAAa2B,MAAb,CAAoB,KAAKF,KAAL,EAApB,CAAP;AACA,C;;AAEDM,S,CAAA,mBAAUC,YAAV,CAAgC;AAC/B,GAAIR,CAAAA,MAAJ;AACA,GAAI;AACHA,MAAM,CAAG,KAAKS,WAAL,CAAiBD,YAAjB,CAAT;AACA,CAAC,MAAOE,GAAP,CAAY;AACb,MAAQA,CAAAA,GAAD,CAAeC,OAAtB;AACA;AACD,GAAI,CAACX,MAAL,CAAa;AACZ,MAAO,yFAAP;AACA;AACD,GAAIA,MAAM,CAACrB,UAAP,GAAsB,MAA1B,CAAkC;AACjC,GAAI,CAACqB,MAAM,CAACnB,SAAR,EAAqB,KAAKiB,aAAL,GAAuB,CAAhD,CAAmD;AAClD,GAAMc,CAAAA,gBAAgB,CAAG,CAAC,QAAD,CAAW,KAAX,CAAkB,cAAlB,CAAkC,oBAAlC,CAAwD,aAAxD,CAAzB;AACA,GAAIA,gBAAgB,CAACC,QAAjB,CAA0B,KAAKC,aAAL,CAAmBd,MAAnB,CAA2B,KAAKC,KAAL,EAA3B,EAAyCc,MAAnE,CAAJ,CAAgF;AAC/E,KAAKrC,OAAL,CAAaE,IAAb,CAAoBoB,MAAM,CAACpB,IAA3B;AACA,KAAKF,OAAL,CAAaI,IAAb,CAAoBkB,MAAM,CAAClB,IAA3B;AACA,KAAKJ,OAAL,CAAaK,KAAb,CAAqBiB,MAAM,CAACjB,KAA5B;AACA,KAAKL,OAAL,CAAaM,CAAb,CAAiBgB,MAAM,CAAChB,CAAxB;AACA,KAAKN,OAAL,CAAaO,GAAb,CAAmBe,MAAM,CAACf,GAA1B;AACA,MAAO,KAAP;AACA;AACD;AACD,GAAIe,MAAM,CAAClB,IAAX,CAAiB,KAAKK,WAAL,CAAmB,IAAnB;AACjB,GAAIa,MAAM,CAAChB,CAAX,CAAc,KAAKK,QAAL,CAAgB,IAAhB;AACd,GAAIW,MAAM,CAACf,GAAX,CAAgB,KAAKG,UAAL,CAAkB,IAAlB;AAChB,KAAKV,OAAL,CAAaE,IAAb,CAAoB,CAApB;AACA,KAAKF,OAAL,CAAaI,IAAb,CAAoB,KAApB;AACA,KAAKJ,OAAL,CAAaK,KAAb,CAAqB,KAArB;AACA,KAAKL,OAAL,CAAaM,CAAb,CAAiB,KAAjB;AACA,KAAKN,OAAL,CAAaO,GAAb,CAAmB,KAAnB;AACA,CApBD,IAoBO,IAAIe,MAAM,CAACrB,UAAP,GAAsB,QAAtB,EAAkCqB,MAAM,CAACrB,UAAP,GAAsB,MAA5D,CAAoE;AAC1E,GAAI,KAAKO,kBAAL,CAAwB2B,QAAxB,CAAiCb,MAAM,CAACgB,aAAxC,CAAJ,CAA4D;AAC3D,GAAIhB,MAAM,CAACrB,UAAP,GAAsB,QAA1B,CAAoC;AACnC,MAAO,iDAAP;AACA;;AAED,IAAK,GAAIsC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAG,KAAK/B,kBAAL,CAAwBW,MAA5C,CAAoDoB,CAAC,EAArD,CAAyD;AACxD,GAAI,KAAK/B,kBAAL,CAAwB+B,CAAxB,IAA+BjB,MAAM,CAACgB,aAA1C,CAAyD;AACxD,KAAK9B,kBAAL,CAAwBgC,MAAxB,CAA+BD,CAA/B,CAAkC,CAAlC;AACA,KAAKxC,OAAL,CAAayC,MAAb,CAAoBD,CAApB,CAAuB,CAAvB;AACA,MAAO,KAAP;AACA;AACD;AACD,MAAO,oCAAP;AACA;AACD,KAAK/B,kBAAL,CAAwBiC,IAAxB,CAA6BnB,MAAM,CAACgB,aAApC;AACA,CAhBM,IAgBA,IAAIhB,MAAM,CAACrB,UAAP,GAAsB,OAA1B,CAAmC;AACzC,GAAI,KAAKsB,KAAL,KAAiB,CAArB,CAAwB;AACvB,MAAO,gEAAP;AACA;AACD;AACD,KAAKxB,OAAL,CAAa0C,IAAb,CAAkB,KAAK1B,YAAL,CAAkBO,MAAlB,CAAlB;AACA,KAAKV,UAAL;AACA,MAAO,KAAP;AACA,C;;;;;;;AAODA,U,CAAA,qBAAa;AACZ,GAAMd,CAAAA,OAAO,CAAG,KAAKA,OAArB;AACA,OAAQA,OAAO,CAAC0B,WAAhB;AACA,IAAK,MAAL;AACC,MAAO,KAAKzB,OAAL,CAAaoB,MAAb,CAAsBrB,OAAO,CAAC2B,MAAR,CAAeN,MAArC,EAA+C,CAACrB,OAAO,CAAC2B,MAAR,CAAe,KAAK1B,OAAL,CAAaoB,MAA5B,CAAvD,CAA4F;AAC3F,KAAKpB,OAAL,CAAa0C,IAAb,CAAkB,MAAlB;AACA;AACD;AACD,IAAK,QAAL;AACC,MAAO,KAAK1C,OAAL,CAAaoB,MAAb,CAAsBrB,OAAO,CAAC4B,WAAR,CAAoBP,MAA1C,EAAoD,CAACrB,OAAO,CAAC4B,WAAR,CAAoB,KAAK3B,OAAL,CAAaoB,MAAjC,CAA5D,CAAsG;AACrG,KAAKpB,OAAL,CAAa0C,IAAb,CAAkB,MAAlB;AACA,CATF;;AAWA,C;;AAEDL,a,CAAA,uBAAcd,MAAd,CAAwCoB,YAAxC,CAA8D;AAC7D,GAAM5C,CAAAA,OAAO,CAAG,KAAKA,OAArB;AACA,GAAM6C,CAAAA,aAAa,CAAG7C,OAAO,CAAC2B,MAAR,CAAeiB,YAAf,CAAtB;AACA,GAAME,CAAAA,SAAS,CAAGtB,MAAM,CAACpB,IAAP,CAAc,CAAhC;AACA,GAAIoB,MAAM,CAAChB,CAAX,CAAc;AACb,MAAOqC,CAAAA,aAAa,CAACE,MAAd,CAAsBD,SAAtB,CAAP;AACA;AACD,GAAItB,MAAM,CAACf,GAAP,EAAeoC,aAAa,CAACG,QAAd,EAA0B,CAACH,aAAa,CAACI,UAA5D,CAAyE;AACxE,MAAOJ,CAAAA,aAAa,CAACG,QAAd,CAAwBF,SAAxB,CAAP;AACA;AACD,MAAOD,CAAAA,aAAa,CAACK,KAAd,CAAoBJ,SAApB,CAAP;AACA,C;;;;;AAKDb,W,CAAA,qBAAYT,MAAZ,CAAiD;AAChD,GAAMxB,CAAAA,OAAO,CAAG,KAAKA,OAArB;AACA,GAAIA,OAAO,CAAC0B,WAAR,GAAwB,MAA5B,CAAoC,KAAM,IAAIyB,CAAAA,KAAJ,yCAAN;;AAEpC,GAAM1B,CAAAA,KAAK,CAAG,KAAKxB,OAAL,CAAaoB,MAA3B;;AAEA,GAAIG,MAAM,GAAK,OAAf,CAAwB,MAAO,CAACrB,UAAU,CAAE,OAAb,CAAP;;AAExB,GAAIqB,MAAM,CAAC4B,UAAP,CAAkB,OAAlB,CAAJ,CAAgC;AAC/B,GAAIpD,OAAO,CAAC0B,WAAR,GAAwB,MAA5B,CAAoC;AACnC,KAAM,IAAIyB,CAAAA,KAAJ,8CAAN;AACA;AACD,GAAME,CAAAA,WAAW,CAAGrD,OAAO,CAAC2B,MAAR,CAAeF,KAAf,CAApB;AACAD,MAAM,CAAGA,MAAM,CAAC8B,KAAP,CAAa,CAAb,CAAT;AACA,GAAIpD,CAAAA,OAAyB,CAAG;AAC/BC,UAAU,CAAE,MADmB;AAE/BC,IAAI,CAAE,CAFyB;AAG/BC,SAAS,CAAE,CAHoB;AAI/BC,IAAI,CAAE,KAJyB;AAK/BC,KAAK,CAAE,KALwB;AAM/BC,CAAC,CAAE,KAN4B;AAO/BC,GAAG,CAAE,KAP0B,CAAhC;;AASA,MAAO,IAAP,CAAa;;;;;AAKZ,GAAI,oBAAoB8C,IAApB,CAAyB/B,MAAzB,GAAoCgC,IAAI,CAAChC,MAAD,CAAJ,GAAiB,aAAzD,CAAwE;AACvE,GAAItB,OAAO,CAACG,SAAZ,CAAuB,KAAM,IAAI8C,CAAAA,KAAJ,oCAAN;AACvBjD,OAAO,CAACG,SAAR,CAAoBoD,QAAQ,CAACjC,MAAM,CAAC8B,KAAP,CAAa,CAAC,CAAd,CAAD,CAAmB,EAAnB,CAA5B;AACA9B,MAAM,CAAGA,MAAM,CAAC8B,KAAP,CAAa,CAAb,CAAgB,CAAC,CAAjB,EAAoBI,IAApB,EAAT;AACA,CAJD,IAIO,IAAIlC,MAAM,CAACmC,QAAP,CAAgB,OAAhB,CAAJ,CAA8B;AACpCzD,OAAO,CAACI,IAAR,CAAe,IAAf;AACAkB,MAAM,CAAGA,MAAM,CAAC8B,KAAP,CAAa,CAAb,CAAgB,CAAC,CAAjB,CAAT;AACA,CAHM,IAGA,IAAI9B,MAAM,CAACmC,QAAP,CAAgB,QAAhB,CAAJ,CAA+B;AACrCzD,OAAO,CAACM,CAAR,CAAY,IAAZ;AACAgB,MAAM,CAAGA,MAAM,CAAC8B,KAAP,CAAa,CAAb,CAAgB,CAAC,CAAjB,CAAT;AACA,CAHM,IAGA,IAAI9B,MAAM,CAACmC,QAAP,CAAgB,QAAhB,CAAJ,CAA+B;AACrCzD,OAAO,CAACK,KAAR,CAAgB,IAAhB;AACAiB,MAAM,CAAGA,MAAM,CAAC8B,KAAP,CAAa,CAAb,CAAgB,CAAC,CAAjB,CAAT;AACA,CAHM,IAGA,IAAI9B,MAAM,CAACmC,QAAP,CAAgB,UAAhB,CAAJ,CAAiC;AACvCzD,OAAO,CAACO,GAAR,CAAc,IAAd;AACAe,MAAM,CAAGA,MAAM,CAAC8B,KAAP,CAAa,CAAb,CAAgB,CAAC,CAAjB,CAAT;AACA,CAHM,IAGA,IAAI9B,MAAM,CAACmC,QAAP,CAAgB,MAAhB,CAAJ,CAA6B;AACnCzD,OAAO,CAACO,GAAR,CAAc,IAAd;AACAe,MAAM,CAAGA,MAAM,CAAC8B,KAAP,CAAa,CAAb,CAAgB,CAAC,CAAjB,CAAT;AACA,CAHM,IAGA;AACN;AACA;AACD;;AAED,GAAI,WAAWC,IAAX,CAAgB/B,MAAhB,CAAJ,CAA6B;;AAE5BtB,OAAO,CAACE,IAAR,CAAeqD,QAAQ,CAACjC,MAAD,CAAS,EAAT,CAAvB;AACA,CAHD,IAGO;;;AAGN,GAAIoC,CAAAA,MAAM,CAAGJ,IAAI,CAAChC,MAAD,CAAjB;AACA,GAAIoC,MAAM,CAACR,UAAP,CAAkB,aAAlB,CAAJ,CAAsCQ,MAAM,CAAG,aAAT;;AAEtC,IAAK,GAAInB,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGY,WAAW,CAACH,KAAZ,CAAkB7B,MAAtC,CAA8CoB,CAAC,EAA/C,CAAmD;AAClD,GAAImB,MAAM,GAAKP,WAAW,CAACH,KAAZ,CAAkBT,CAAlB,EAAqBoB,EAApC,CAAwC;AACvC3D,OAAO,CAACE,IAAR,CAAeqC,CAAC,CAAG,CAAnB;AACA;AACA;AACD;AACD,GAAI,CAACvC,OAAO,CAACE,IAAT,EAAiBiD,WAAW,CAACN,MAAjC,CAAyC;AACxC,IAAK,GAAIN,CAAAA,GAAC,CAAG,CAAb,CAAgBA,GAAC,CAAGY,WAAW,CAACN,MAAZ,CAAmB1B,MAAvC,CAA+CoB,GAAC,EAAhD,CAAoD;AACnD,GAAI,CAACY,WAAW,CAACN,MAAZ,CAAmBN,GAAnB,CAAL,CAA4B;AAC5B,GAAImB,MAAM,GAAKP,WAAW,CAACN,MAAZ,CAAmBN,GAAnB,EAAuBoB,EAAtC,CAA0C;AACzC3D,OAAO,CAACE,IAAR,CAAeqC,GAAC,CAAG,CAAnB;AACAvC,OAAO,CAACM,CAAR,CAAY,IAAZ;AACA;AACA;AACD;AACD;AACD,GAAI,CAACN,OAAO,CAACE,IAAT,EAAiBiD,WAAW,CAACL,QAAjC,CAA2C;AAC1C,IAAK,GAAIP,CAAAA,GAAC,CAAG,CAAb,CAAgBA,GAAC,CAAGY,WAAW,CAACL,QAAZ,CAAqB3B,MAAzC,CAAiDoB,GAAC,EAAlD,CAAsD;AACrD,GAAImB,MAAM,GAAKP,WAAW,CAACL,QAAZ,CAAqBP,GAArB,EAAwBoB,EAAvC,CAA2C;AAC1C3D,OAAO,CAACE,IAAR,CAAeqC,GAAC,CAAG,CAAnB;AACAvC,OAAO,CAACO,GAAR,CAAc,IAAd;AACA;AACA;AACD;AACD;AACD;AACD,GAAIP,OAAO,CAACO,GAAR,EAAe,CAAC4C,WAAW,CAACJ,UAAhC,CAA4C/C,OAAO,CAACO,GAAR,CAAc,KAAd;AAC5C,MAAOP,CAAAA,OAAP;AACA;;AAED,GAAIsB,MAAM,CAAC4B,UAAP,CAAkB,SAAlB,GAAgC5B,MAAM,CAAC4B,UAAP,CAAkB,OAAlB,CAApC,CAAgE;AAC/D5B,MAAM,CAAGA,MAAM,CAAC8B,KAAP,CAAa9B,MAAM,CAAC4B,UAAP,CAAkB,OAAlB,EAA6B,CAA7B,CAAiC,CAA9C,CAAT;AACA,GAAMU,CAAAA,aAAa,CAAG9D,OAAO,CAAC0B,WAAR,GAAwB,MAA9C;AACA,GAAIxB,CAAAA,QAA2B,CAAG;AACjCC,UAAU,CAAE2D,aAAa,CAAG,MAAH,CAAY,QADJ;AAEjCtB,aAAa,CAAE,CAFkB,CAAlC;;AAIA,GAAI,WAAWe,IAAX,CAAgB/B,MAAhB,CAAJ,CAA6B;;AAE5BtB,QAAO,CAACsC,aAAR,CAAwBiB,QAAQ,CAACjC,MAAD,CAAS,EAAT,CAAhC;AACA,CAHD,IAGO;;AAEN,GAAMuC,CAAAA,WAAW,CAAGvC,MAAM,CAACwC,WAAP,EAApB;AACA,GAAMC,CAAAA,QAAQ,CAAGT,IAAI,CAAChC,MAAD,CAArB;AACA,GAAI0C,CAAAA,UAAU,CAAG,CAAjB;AACA,GAAIC,CAAAA,KAAK,CAAG,CAAZ;AACA,IAAK,GAAI1B,CAAAA,GAAC,CAAG,CAAb,CAAiBA,GAAC,CAAGzC,OAAO,CAACoE,IAAR,CAAaC,OAAb,CAAqBhD,MAA1C,CAAkDoB,GAAC,EAAnD,CAAuD;AACtD,GAAM6B,CAAAA,aAAa,CAAGtE,OAAO,CAACoE,IAAR,CAAaC,OAAb,CAAqB5B,GAArB,CAAtB;AACA,GAAI8B,CAAAA,aAAa,CAAG,CAApB;AACA,GAAI/C,MAAM,GAAK8C,aAAa,CAACE,IAA7B,CAAmC;AAClCD,aAAa,CAAG,EAAhB;AACA,CAFD,IAEO,IAAIR,WAAW,GAAKO,aAAa,CAACE,IAAd,CAAmBR,WAAnB,EAApB,CAAsD;AAC5DO,aAAa,CAAG,CAAhB;AACA,CAFM,IAEA,IAAIN,QAAQ,GAAKT,IAAI,CAACc,aAAa,CAACE,IAAf,CAArB,CAA2C;AACjDD,aAAa,CAAG,CAAhB;AACA,CAFM,IAEA,IAAIN,QAAQ,GAAKT,IAAI,CAACc,aAAa,CAACG,YAAf,CAArB,CAAmD;AACzDF,aAAa,CAAG,CAAhB;AACA,CAFM,IAEA,IAAIN,QAAQ,GAAKT,IAAI,CAACkB,GAAG,CAACC,UAAJ,CAAeL,aAAa,CAACG,YAA7B,EAA2CG,WAA5C,CAArB,CAA+E;AACrFL,aAAa,CAAG,CAAhB;AACA;AACD,GAAIA,aAAa,CAAGL,UAApB,CAAgC;AAC/BC,KAAK,CAAG1B,GAAC,CAAG,CAAZ;AACAyB,UAAU,CAAGK,aAAb;AACA;AACD;AACD,GAAI,CAACJ,KAAL,CAAY;AACX,KAAM,IAAIhB,CAAAA,KAAJ,+BAAoC3B,MAApC,mBAAN;AACA;AACDtB,QAAO,CAACsC,aAAR,CAAwB2B,KAAxB;AACA;AACD,GAAI,CAACL,aAAD,EAAkB5D,QAAO,CAACsC,aAAR,CAAwB,CAAxB,CAA4B,KAAKlB,aAAL,EAAlD,CAAwE;AACvE,KAAM,IAAI6B,CAAAA,KAAJ,yCAAN;AACA;AACD,GAAMZ,CAAAA,MAAM,CAAGvC,OAAO,CAACoE,IAAR,CAAaC,OAAb,CAAqBnE,QAAO,CAACsC,aAAR,CAAwB,CAA7C,CAAf;AACA,GAAI,CAACD,MAAL,CAAa;AACZ,KAAM,IAAIY,CAAAA,KAAJ,+BAAoC3B,MAApC,oBAAN;AACA;AACD,GAAIe,MAAM,CAACsC,OAAX,CAAoB;AACnB,KAAM,IAAI1B,CAAAA,KAAJ,CAAaZ,MAAb,kCAAN;AACA;AACD,MAAOrC,CAAAA,QAAP;AACA;;AAED,GAAIsB,MAAM,GAAK,MAAf,CAAuB,MAAO,KAAP;;AAEvB,KAAM,IAAI2B,CAAAA,KAAJ,0BAAkC3B,MAAlC,MAAN;AACA,C;;;;;AAKDP,Y,CAAA,sBAAaO,MAAb,CAA0C;AACzC,GAAI,CAACA,MAAL,CAAa;AACb,OAAQA,MAAM,CAACrB,UAAf;AACA,IAAK,MAAL;AACC,GAAMoC,CAAAA,MAAM,CAAGf,MAAM,CAACnB,SAAP,MAAuBmB,MAAM,CAACnB,SAAP,CAAmB,CAAnB,CAAuB,GAAvB,CAA6B,EAApD,EAAyDmB,MAAM,CAACnB,SAAhE,GAAf;AACA,GAAMyE,CAAAA,KAAK,KAAMtD,MAAM,CAACf,GAAP,CAAa,MAAb,CAAsB,EAA5B,GAAiCe,MAAM,CAAClB,IAAP,CAAc,OAAd,CAAwB,EAAzD,GAA8DkB,MAAM,CAAChB,CAAP,CAAW,QAAX,CAAsB,EAApF,CAAX;AACA,cAAegB,MAAM,CAACpB,IAAtB,CAA6B0E,KAA7B,CAAqCvC,MAArC;AACD,IAAK,QAAL;AACA,IAAK,MAAL;AACC,MAAUf,CAAAA,MAAM,CAACrB,UAAjB,KAA+BqB,MAAM,CAACgB,aAAtC;AACD,IAAK,OAAL;AACC,cATD;;AAWA,C;;;;;;;;;;;;;AAaMuC,U,CAAP,oBAAkB/E,OAAlB,CAAgCgF,MAAhC,CAAgD;AAC/C,GAAI,CAAChF,OAAO,CAAC0B,WAAb,CAA0B;AACzB1B,OAAO,CAAC0B,WAAR,CAAsB,MAAtB;AACA,GAAI1B,OAAO,CAAC4B,WAAZ,CAAyB;AACxB5B,OAAO,CAAC0B,WAAR,CAAsB,QAAtB;AACA,CAFD,IAEO,IAAI1B,OAAO,CAACiF,WAAZ,CAAyB;AAC/BjF,OAAO,CAAC0B,WAAR,CAAsB,MAAtB;AACA,CAFM,IAEA,IAAI1B,OAAO,CAACkF,IAAZ,CAAkB;AACxBlF,OAAO,CAAC0B,WAAR,CAAsB,MAAtB;AACA;AACD;;AAED,GAAI1B,OAAO,CAAC0B,WAAR,GAAwB,MAA5B,CAAoC1B,OAAO,CAACmF,QAAR,CAAmB,IAAnB;AACpC,GAAInF,OAAO,CAACoE,IAAZ,CAAkB;AACWpE,OAAO,CAACoE,IAAR,CAAaC,OADxB,wCACiC,CAA7C,GAAMC,CAAAA,aAAa,2BAAnB;AACJU,MAAM,CAACI,YAAP,CAAoBd,aAAa,CAACe,KAAd,CAAoBC,MAApB,CAA2B,CAA3B,CAApB,CAAmDhB,aAAa,CAACe,KAAjE,CAAwEf,aAAa,CAACiB,OAAtF,CAA+FjB,aAA/F;AACAU,MAAM,CAACQ,WAAP,CAAmBlB,aAAa,CAACmB,SAAjC,CAA4CnB,aAA5C;AACA;AACD;;AAED,GAAItE,OAAO,CAAC2B,MAAZ,CAAoB;AACnB3B,OAAO,CAAC2B,MAAR,CAAiB3B,OAAO,CAAC2B,MAAR,CAAe+D,GAAf;AAChB,SAAC/D,MAAD,CAAcc,CAAd,QAA4BzC,CAAAA,OAAO,CAACoE,IAAR,CAAaC,OAAb,CAAqB5B,CAArB,EAAwBoC,OAAxB,CAAkC,IAAlC,CAAyClD,MAArE,EADgB,CAAjB,CADmB;;AAIE3B,OAAO,CAAC2B,MAJV,kCAIkB,CAAhC,GAAMA,CAAAA,MAAM,qBAAZ;AACJ,GAAI,CAACA,MAAL,CAAa,SADuB;AAEjBA,MAAM,CAACuB,KAFU,gCAEH,CAA5B,GAAM9C,CAAAA,IAAI,mBAAV;AACJ,GAAIA,IAAI,CAACA,IAAT,CAAeA,IAAI,CAACoE,IAAL,CAAYpE,IAAI,CAACA,IAAjB;AACfA,IAAI,CAACyD,EAAL,CAAUL,IAAI,CAACpD,IAAI,CAACoE,IAAN,CAAd;AACA;AACD,GAAI7C,MAAM,CAACqB,QAAX,CAAqB;AACpB,GAAIrB,MAAM,CAACqB,QAAP,CAAgBA,QAApB,CAA8B;AAC7BrB,MAAM,CAACgE,aAAP,CAAuBhE,MAAM,CAACqB,QAAP,CAAgB4C,UAAvC;AACAjE,MAAM,CAACqB,QAAP,CAAkBrB,MAAM,CAACqB,QAAP,CAAgBA,QAAlC;AACA,CAJmB;AAKDrB,MAAM,CAACqB,QALN,mCAKgB,CAA/B,GAAM5C,CAAAA,KAAI,sBAAV;AACJ,GAAIA,KAAI,CAACA,IAAT,CAAeA,KAAI,CAACoE,IAAL,CAAYE,GAAG,CAACmB,OAAJ,CAAYzF,KAAI,CAACA,IAAjB,EAAuBoE,IAAnC;AACfpE,KAAI,CAACyD,EAAL,CAAUL,IAAI,CAACpD,KAAI,CAACoE,IAAN,CAAd;AACA;AACD;AACD,GAAI7C,MAAM,CAACmE,QAAX,CAAqB;AACpBnE,MAAM,CAACoB,MAAP,CAAgBpB,MAAM,CAACmE,QAAvB,CADoB;AAEDnE,MAAM,CAACoB,MAFN,iCAEc,CAA7B,GAAM3C,CAAAA,MAAI,oBAAV;AACJ,GAAI,CAACA,MAAL,CAAW;AACX,GAAIA,MAAI,CAACA,IAAT,CAAeA,MAAI,CAACoE,IAAL,CAAYpE,MAAI,CAACA,IAAjB;AACfA,MAAI,CAACyD,EAAL,CAAUL,IAAI,CAACpD,MAAI,CAACoE,IAAN,CAAd;AACA;AACD;AACD;AACD;AACD,C","sourcesContent":["/**\r\n * Battle choices\r\n *\r\n * PS will send requests \"what do you do this turn?\", and you send back\r\n * choices \"I switch Pikachu for Caterpie, and Squirtle uses Water Gun\"\r\n *\r\n * This file contains classes for handling requests and choices.\r\n *\r\n * Dependencies: battle-dex\r\n *\r\n * @author Guangcong Luo <guangcongluo@gmail.com>\r\n * @license MIT\r\n */\r\n\r\ninterface BattleRequestSideInfo {\r\n\tname: string;\r\n\tid: 'p1' | 'p2' | 'p3' | 'p4';\r\n\tpokemon: ServerPokemon[];\r\n}\r\ninterface BattleRequestActivePokemon {\r\n\tmoves: {\r\n\t\tname: string,\r\n\t\tid: ID,\r\n\t\tpp: number,\r\n\t\tmaxpp: number,\r\n\t\ttarget: MoveTarget,\r\n\t\tdisabled?: boolean,\r\n\t}[];\r\n\tmaxMoves?: {\r\n\t\tname: string,\r\n\t\tid: ID,\r\n\t\ttarget: MoveTarget,\r\n\t\tdisabled?: boolean,\r\n\t}[];\r\n\tzMoves?: ({\r\n\t\tname: string,\r\n\t\tid: ID,\r\n\t\ttarget: MoveTarget,\r\n\t} | null)[];\r\n\t/** also true if the pokemon can Gigantamax */\r\n\tcanDynamax?: boolean;\r\n\tcanGigantamax?: boolean;\r\n\tcanMegaEvo?: boolean;\r\n\tcanUltraBurst?: boolean;\r\n\ttrapped?: boolean;\r\n\tmaybeTrapped?: boolean;\r\n}\r\n\r\ninterface BattleMoveRequest {\r\n\trequestType: 'move';\r\n\trqid: number;\r\n\tside: BattleRequestSideInfo;\r\n\tactive: (BattleRequestActivePokemon | null)[];\r\n\tnoCancel?: boolean;\r\n}\r\ninterface BattleSwitchRequest {\r\n\trequestType: 'switch';\r\n\trqid: number;\r\n\tside: BattleRequestSideInfo;\r\n\tforceSwitch: boolean[];\r\n\tnoCancel?: boolean;\r\n}\r\ninterface BattleTeamRequest {\r\n\trequestType: 'team';\r\n\trqid: number;\r\n\tside: BattleRequestSideInfo;\r\n\tmaxTeamSize?: number;\r\n\tnoCancel?: boolean;\r\n}\r\ninterface BattleWaitRequest {\r\n\trequestType: 'wait';\r\n\trqid: number;\r\n\tside: undefined;\r\n\tnoCancel?: boolean;\r\n}\r\ntype BattleRequest = BattleMoveRequest | BattleSwitchRequest | BattleTeamRequest | BattleWaitRequest;\r\n\r\ninterface BattleMoveChoice {\r\n\tchoiceType: 'move';\r\n\t/** 1-based move */\r\n\tmove: number;\r\n\ttargetLoc: number;\r\n\tmega: boolean;\r\n\tultra: boolean;\r\n\tmax: boolean;\r\n\tz: boolean;\r\n}\r\ninterface BattleShiftChoice {\r\n\tchoiceType: 'shift';\r\n}\r\ninterface BattleSwitchChoice {\r\n\tchoiceType: 'switch' | 'team';\r\n\t/** 1-based pokemon */\r\n\ttargetPokemon: number;\r\n}\r\ntype BattleChoice = BattleMoveChoice | BattleShiftChoice | BattleSwitchChoice;\r\n\r\n/**\r\n * Tracks a partial choice, allowing you to build it up one step at a time,\r\n * and maybe even construct a UI to build it!\r\n *\r\n * Doesn't support going backwards; just use `new BattleChoiceBuilder`.\r\n */\r\nclass BattleChoiceBuilder {\r\n\trequest: BattleRequest;\r\n\t/** Completed choices in string form */\r\n\tchoices: string[] = [];\r\n\t/** Currently active partial move choice - not used for other choices, which don't have partial states */\r\n\tcurrent: BattleMoveChoice = {\r\n\t\tchoiceType: 'move',\r\n\t\t/** if nonzero, show target screen; if zero, show move screen */\r\n\t\tmove: 0,\r\n\t\ttargetLoc: 0, // should always be 0: is not partial if `targetLoc` is known\r\n\t\tmega: false,\r\n\t\tultra: false,\r\n\t\tz: false,\r\n\t\tmax: false,\r\n\t};\r\n\talreadySwitchingIn: number[] = [];\r\n\talreadyMega = false;\r\n\talreadyMax = false;\r\n\talreadyZ = false;\r\n\r\n\tconstructor(request: BattleRequest) {\r\n\t\tthis.request = request;\r\n\t\tthis.fillPasses();\r\n\t}\r\n\r\n\ttoString() {\r\n\t\tlet choices = this.choices;\r\n\t\tif (this.current.move) choices = choices.concat(this.stringChoice(this.current));\r\n\t\treturn choices.join(', ').replace(/, team /g, ', ');\r\n\t}\r\n\r\n\tisDone() {\r\n\t\treturn this.choices.length >= this.requestLength();\r\n\t}\r\n\tisEmpty() {\r\n\t\tfor (const choice of this.choices) {\r\n\t\t\tif (choice !== 'pass') return false;\r\n\t\t}\r\n\t\tif (this.current.move) return false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/** Index of the current Pokémon to make choices for */\r\n\tindex() {\r\n\t\treturn this.choices.length;\r\n\t}\r\n\t/** How many choices is the server expecting? */\r\n\trequestLength() {\r\n\t\tconst request = this.request;\r\n\t\tswitch (request.requestType) {\r\n\t\tcase 'move':\r\n\t\t\treturn request.active.length;\r\n\t\tcase 'switch':\r\n\t\t\treturn request.forceSwitch.length;\r\n\t\tcase 'team':\r\n\t\t\tif (request.maxTeamSize) return request.maxTeamSize;\r\n\t\t\treturn 1;\r\n\t\tcase 'wait':\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\tcurrentMoveRequest() {\r\n\t\tif (this.request.requestType !== 'move') return null;\r\n\t\treturn this.request.active[this.index()];\r\n\t}\r\n\r\n\taddChoice(choiceString: string) {\r\n\t\tlet choice: BattleChoice | null;\r\n\t\ttry {\r\n\t\t\tchoice = this.parseChoice(choiceString);\r\n\t\t} catch (err) {\r\n\t\t\treturn (err as Error).message;\r\n\t\t}\r\n\t\tif (!choice) {\r\n\t\t\treturn \"You do not need to manually choose to pass; the client handles it for you automatically\";\r\n\t\t}\r\n\t\tif (choice.choiceType === 'move') {\r\n\t\t\tif (!choice.targetLoc && this.requestLength() > 1) {\r\n\t\t\t\tconst choosableTargets = ['normal', 'any', 'adjacentAlly', 'adjacentAllyOrSelf', 'adjacentFoe'];\r\n\t\t\t\tif (choosableTargets.includes(this.getChosenMove(choice, this.index()).target)) {\r\n\t\t\t\t\tthis.current.move = choice.move;\r\n\t\t\t\t\tthis.current.mega = choice.mega;\r\n\t\t\t\t\tthis.current.ultra = choice.ultra;\r\n\t\t\t\t\tthis.current.z = choice.z;\r\n\t\t\t\t\tthis.current.max = choice.max;\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (choice.mega) this.alreadyMega = true;\r\n\t\t\tif (choice.z) this.alreadyZ = true;\r\n\t\t\tif (choice.max) this.alreadyMax = true;\r\n\t\t\tthis.current.move = 0;\r\n\t\t\tthis.current.mega = false;\r\n\t\t\tthis.current.ultra = false;\r\n\t\t\tthis.current.z = false;\r\n\t\t\tthis.current.max = false;\r\n\t\t} else if (choice.choiceType === 'switch' || choice.choiceType === 'team') {\r\n\t\t\tif (this.alreadySwitchingIn.includes(choice.targetPokemon)) {\r\n\t\t\t\tif (choice.choiceType === 'switch') {\r\n\t\t\t\t\treturn \"You've already chosen to switch that Pokémon in\";\r\n\t\t\t\t}\r\n\t\t\t\t// remove choice instead\r\n\t\t\t\tfor (let i = 0; i < this.alreadySwitchingIn.length; i++) {\r\n\t\t\t\t\tif (this.alreadySwitchingIn[i] === choice.targetPokemon) {\r\n\t\t\t\t\t\tthis.alreadySwitchingIn.splice(i, 1);\r\n\t\t\t\t\t\tthis.choices.splice(i, 1);\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn \"Unexpected bug, please report this\";\r\n\t\t\t}\r\n\t\t\tthis.alreadySwitchingIn.push(choice.targetPokemon);\r\n\t\t} else if (choice.choiceType === 'shift') {\r\n\t\t\tif (this.index() === 1) {\r\n\t\t\t\treturn \"Only Pokémon not already in the center can shift to the center\";\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.choices.push(this.stringChoice(choice));\r\n\t\tthis.fillPasses();\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * Move and switch requests will often skip over some active Pokémon (mainly\r\n\t * fainted Pokémon). This will fill them in automatically, so we don't need\r\n\t * to ask a user for them.\r\n\t */\r\n\tfillPasses() {\r\n\t\tconst request = this.request;\r\n\t\tswitch (request.requestType) {\r\n\t\tcase 'move':\r\n\t\t\twhile (this.choices.length < request.active.length && !request.active[this.choices.length]) {\r\n\t\t\t\tthis.choices.push('pass');\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase 'switch':\r\n\t\t\twhile (this.choices.length < request.forceSwitch.length && !request.forceSwitch[this.choices.length]) {\r\n\t\t\t\tthis.choices.push('pass');\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tgetChosenMove(choice: BattleMoveChoice, pokemonIndex: number) {\r\n\t\tconst request = this.request as BattleMoveRequest;\r\n\t\tconst activePokemon = request.active[pokemonIndex]!;\r\n\t\tconst moveIndex = choice.move - 1;\r\n\t\tif (choice.z) {\r\n\t\t\treturn activePokemon.zMoves![moveIndex]!;\r\n\t\t}\r\n\t\tif (choice.max || (activePokemon.maxMoves && !activePokemon.canDynamax)) {\r\n\t\t\treturn activePokemon.maxMoves![moveIndex];\r\n\t\t}\r\n\t\treturn activePokemon.moves[moveIndex];\r\n\t}\r\n\r\n\t/**\r\n\t * Parses a choice from string form to BattleChoice form\r\n\t */\r\n\tparseChoice(choice: string): BattleChoice | null {\r\n\t\tconst request = this.request;\r\n\t\tif (request.requestType === 'wait') throw new Error(`It's not your turn to choose anything`);\r\n\r\n\t\tconst index = this.choices.length;\r\n\r\n\t\tif (choice === 'shift') return {choiceType: 'shift'};\r\n\r\n\t\tif (choice.startsWith('move ')) {\r\n\t\t\tif (request.requestType !== 'move') {\r\n\t\t\t\tthrow new Error(`You must switch in a Pokémon, not move.`);\r\n\t\t\t}\r\n\t\t\tconst moveRequest = request.active[index]!;\r\n\t\t\tchoice = choice.slice(5);\r\n\t\t\tlet current: BattleMoveChoice = {\r\n\t\t\t\tchoiceType: 'move',\r\n\t\t\t\tmove: 0,\r\n\t\t\t\ttargetLoc: 0,\r\n\t\t\t\tmega: false,\r\n\t\t\t\tultra: false,\r\n\t\t\t\tz: false,\r\n\t\t\t\tmax: false,\r\n\t\t\t};\r\n\t\t\twhile (true) {\r\n\t\t\t\t// If data ends with a number, treat it as a target location.\r\n\t\t\t\t// We need to special case 'Conversion 2' so it doesn't get\r\n\t\t\t\t// confused with 'Conversion' erroneously sent with the target\r\n\t\t\t\t// '2' (since Conversion targets 'self', targetLoc can't be 2).\r\n\t\t\t\tif (/\\s(?:-|\\+)?[1-3]$/.test(choice) && toID(choice) !== 'conversion2') {\r\n\t\t\t\t\tif (current.targetLoc) throw new Error(`Move choice has multiple targets`);\r\n\t\t\t\t\tcurrent.targetLoc = parseInt(choice.slice(-2), 10);\r\n\t\t\t\t\tchoice = choice.slice(0, -2).trim();\r\n\t\t\t\t} else if (choice.endsWith(' mega')) {\r\n\t\t\t\t\tcurrent.mega = true;\r\n\t\t\t\t\tchoice = choice.slice(0, -5);\r\n\t\t\t\t} else if (choice.endsWith(' zmove')) {\r\n\t\t\t\t\tcurrent.z = true;\r\n\t\t\t\t\tchoice = choice.slice(0, -6);\r\n\t\t\t\t} else if (choice.endsWith(' ultra')) {\r\n\t\t\t\t\tcurrent.ultra = true;\r\n\t\t\t\t\tchoice = choice.slice(0, -6);\r\n\t\t\t\t} else if (choice.endsWith(' dynamax')) {\r\n\t\t\t\t\tcurrent.max = true;\r\n\t\t\t\t\tchoice = choice.slice(0, -8);\r\n\t\t\t\t} else if (choice.endsWith(' max')) {\r\n\t\t\t\t\tcurrent.max = true;\r\n\t\t\t\t\tchoice = choice.slice(0, -4);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (/^[0-9]+$/.test(choice)) {\r\n\t\t\t\t// Parse a one-based move index.\r\n\t\t\t\tcurrent.move = parseInt(choice, 10);\r\n\t\t\t} else {\r\n\t\t\t\t// Parse a move ID.\r\n\t\t\t\t// Move names are also allowed, but may cause ambiguity (see client issue #167).\r\n\t\t\t\tlet moveid = toID(choice);\r\n\t\t\t\tif (moveid.startsWith('hiddenpower')) moveid = 'hiddenpower' as ID;\r\n\r\n\t\t\t\tfor (let i = 0; i < moveRequest.moves.length; i++) {\r\n\t\t\t\t\tif (moveid === moveRequest.moves[i].id) {\r\n\t\t\t\t\t\tcurrent.move = i + 1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (!current.move && moveRequest.zMoves) {\r\n\t\t\t\t\tfor (let i = 0; i < moveRequest.zMoves.length; i++) {\r\n\t\t\t\t\t\tif (!moveRequest.zMoves[i]) continue;\r\n\t\t\t\t\t\tif (moveid === moveRequest.zMoves[i]!.id) {\r\n\t\t\t\t\t\t\tcurrent.move = i + 1;\r\n\t\t\t\t\t\t\tcurrent.z = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (!current.move && moveRequest.maxMoves) {\r\n\t\t\t\t\tfor (let i = 0; i < moveRequest.maxMoves.length; i++) {\r\n\t\t\t\t\t\tif (moveid === moveRequest.maxMoves[i].id) {\r\n\t\t\t\t\t\t\tcurrent.move = i + 1;\r\n\t\t\t\t\t\t\tcurrent.max = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (current.max && !moveRequest.canDynamax) current.max = false;\r\n\t\t\treturn current;\r\n\t\t}\r\n\r\n\t\tif (choice.startsWith('switch ') || choice.startsWith('team ')) {\r\n\t\t\tchoice = choice.slice(choice.startsWith('team ') ? 5 : 7);\r\n\t\t\tconst isTeamPreview = request.requestType === 'team';\r\n\t\t\tlet current: BattleSwitchChoice = {\r\n\t\t\t\tchoiceType: isTeamPreview ? 'team' : 'switch',\r\n\t\t\t\ttargetPokemon: 0,\r\n\t\t\t};\r\n\t\t\tif (/^[0-9]+$/.test(choice)) {\r\n\t\t\t\t// Parse a one-based move index.\r\n\t\t\t\tcurrent.targetPokemon = parseInt(choice, 10);\r\n\t\t\t} else {\r\n\t\t\t\t// Parse a pokemon name\r\n\t\t\t\tconst lowerChoice = choice.toLowerCase();\r\n\t\t\t\tconst choiceid = toID(choice);\r\n\t\t\t\tlet matchLevel = 0;\r\n\t\t\t\tlet match = 0;\r\n\t\t\t\tfor (let i = 0 ; i < request.side.pokemon.length; i++) {\r\n\t\t\t\t\tconst serverPokemon = request.side.pokemon[i];\r\n\t\t\t\t\tlet curMatchLevel = 0;\r\n\t\t\t\t\tif (choice === serverPokemon.name) {\r\n\t\t\t\t\t\tcurMatchLevel = 10;\r\n\t\t\t\t\t} else if (lowerChoice === serverPokemon.name.toLowerCase()) {\r\n\t\t\t\t\t\tcurMatchLevel = 9;\r\n\t\t\t\t\t} else if (choiceid === toID(serverPokemon.name)) {\r\n\t\t\t\t\t\tcurMatchLevel = 8;\r\n\t\t\t\t\t} else if (choiceid === toID(serverPokemon.speciesForme)) {\r\n\t\t\t\t\t\tcurMatchLevel = 7;\r\n\t\t\t\t\t} else if (choiceid === toID(Dex.getSpecies(serverPokemon.speciesForme).baseSpecies)) {\r\n\t\t\t\t\t\tcurMatchLevel = 6;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (curMatchLevel > matchLevel) {\r\n\t\t\t\t\t\tmatch = i + 1;\r\n\t\t\t\t\t\tmatchLevel = curMatchLevel;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (!match) {\r\n\t\t\t\t\tthrow new Error(`Couldn't find Pokémon \"${choice}\" to switch to`);\r\n\t\t\t\t}\r\n\t\t\t\tcurrent.targetPokemon = match;\r\n\t\t\t}\r\n\t\t\tif (!isTeamPreview && current.targetPokemon - 1 < this.requestLength()) {\r\n\t\t\t\tthrow new Error(`That Pokémon is already in battle!`);\r\n\t\t\t}\r\n\t\t\tconst target = request.side.pokemon[current.targetPokemon - 1];\r\n\t\t\tif (!target) {\r\n\t\t\t\tthrow new Error(`Couldn't find Pokémon \"${choice}\" to switch to!`);\r\n\t\t\t}\r\n\t\t\tif (target.fainted) {\r\n\t\t\t\tthrow new Error(`${target} is fainted and cannot battle!`);\r\n\t\t\t}\r\n\t\t\treturn current;\r\n\t\t}\r\n\r\n\t\tif (choice === 'pass') return null;\r\n\r\n\t\tthrow new Error(`Unrecognized choice \"${choice}\"`);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a choice from `BattleChoice` into string form\r\n\t */\r\n\tstringChoice(choice: BattleChoice | null) {\r\n\t\tif (!choice) return `pass`;\r\n\t\tswitch (choice.choiceType) {\r\n\t\tcase 'move':\r\n\t\t\tconst target = choice.targetLoc ? ` ${choice.targetLoc > 0 ? '+' : ''}${choice.targetLoc}` : ``;\r\n\t\t\tconst boost = `${choice.max ? ' max' : ''}${choice.mega ? ' mega' : ''}${choice.z ? ' zmove' : ''}`;\r\n\t\t\treturn `move ${choice.move}${boost}${target}`;\r\n\t\tcase 'switch':\r\n\t\tcase 'team':\r\n\t\t\treturn `${choice.choiceType} ${choice.targetPokemon}`;\r\n\t\tcase 'shift':\r\n\t\t\treturn `shift`;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The request sent from the server is actually really gross, but we'll have\r\n\t * to wait until we transition to the new client before fixing it in the\r\n\t * protocol, in the interests of not needing to fix it twice (or needing to\r\n\t * fix it without TypeScript).\r\n\t *\r\n\t * In the meantime, this function converts a request from a shitty request\r\n\t * to a request that makes sense.\r\n\t *\r\n\t * I'm sorry for literally all of this.\r\n\t */\r\n\tstatic fixRequest(request: any, battle: Battle) {\r\n\t\tif (!request.requestType) {\r\n\t\t\trequest.requestType = 'move';\r\n\t\t\tif (request.forceSwitch) {\r\n\t\t\t\trequest.requestType = 'switch';\r\n\t\t\t} else if (request.teamPreview) {\r\n\t\t\t\trequest.requestType = 'team';\r\n\t\t\t} else if (request.wait) {\r\n\t\t\t\trequest.requestType = 'wait';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (request.requestType === 'wait') request.noCancel = true;\r\n\t\tif (request.side) {\r\n\t\t\tfor (const serverPokemon of request.side.pokemon) {\r\n\t\t\t\tbattle.parseDetails(serverPokemon.ident.substr(4), serverPokemon.ident, serverPokemon.details, serverPokemon);\r\n\t\t\t\tbattle.parseHealth(serverPokemon.condition, serverPokemon);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (request.active) {\r\n\t\t\trequest.active = request.active.map(\r\n\t\t\t\t(active: any, i: number) => request.side.pokemon[i].fainted ? null : active\r\n\t\t\t);\r\n\t\t\tfor (const active of request.active) {\r\n\t\t\t\tif (!active) continue;\r\n\t\t\t\tfor (const move of active.moves) {\r\n\t\t\t\t\tif (move.move) move.name = move.move;\r\n\t\t\t\t\tmove.id = toID(move.name);\r\n\t\t\t\t}\r\n\t\t\t\tif (active.maxMoves) {\r\n\t\t\t\t\tif (active.maxMoves.maxMoves) {\r\n\t\t\t\t\t\tactive.canGigantamax = active.maxMoves.gigantamax;\r\n\t\t\t\t\t\tactive.maxMoves = active.maxMoves.maxMoves;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (const move of active.maxMoves) {\r\n\t\t\t\t\t\tif (move.move) move.name = Dex.getMove(move.move).name;\r\n\t\t\t\t\t\tmove.id = toID(move.name);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (active.canZMove) {\r\n\t\t\t\t\tactive.zMoves = active.canZMove;\r\n\t\t\t\t\tfor (const move of active.zMoves) {\r\n\t\t\t\t\t\tif (!move) continue;\r\n\t\t\t\t\t\tif (move.move) move.name = move.move;\r\n\t\t\t\t\t\tmove.id = toID(move.name);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"],"file":"battle-choices.js"}