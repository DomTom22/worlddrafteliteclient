{"version":3,"sources":["../src/battle-dex-search.ts"],"names":["DexSearch","searchType","formatid","species","query","dex","Dex","typedSearch","results","exactMatch","firstPokemonColumn","sortCol","filters","setType","window","room","curTeam","mod","getTypedSearch","format","speciesOrSet","BattlePokemonSearch","BattleItemSearch","BattleMoveSearch","BattleAbilitySearch","BattleTypeSearch","BattleCategorySearch","find","toID","getResults","textSearch","addFilter","entry","type","includes","filter","push","removeFilter","filterid","join","deleted","i","length","splice","pop","toggleSort","filterLabel","filterType","illegalLabel","id","illegalReasons","getTier","searchTypeIndex","typeTable","qFilterType","slice","charAt","toUpperCase","BattleTypeChart","getClosest","BattleSearchIndex","passType","searchPasses","queryAlias","BattleAliases","aliasPassType","unshift","substr","matchLength","matchQuery","bufs","topbufIndex","count","nearMatch","instafilter","instafilterSort","illegal","searchPass","shift","typeIndex","gen","startsWith","matchStart","matchEnd","originalIndex","BattleSearchIndexOffset","charCodeAt","table","BattleTeambuilderTable","BattlePokedex","exists","overrideDexInfo","BattleItems","overrideItemDesc","BattleMovedex","overrideMoveInfo","BattleAbilities","overrideAbilityDesc","replace","overrideTypeChart","typeName","curBufLength","topbuf","concat","Array","prototype","apply","fType","fId","buf","illegalBuf","pokedex","moveDex","types","abilities","category","getSpecies","ability","getAbility","name","hasAbility","left","right","mid","Math","floor","pokemon","tier","move","item","egggroup","article","BattleTypedSearch","modFormat","set","formatType","baseResults","baseIllegalResults","sortRow","ClientMods","ModConfig","Number","overrideFormat","modFormatType","modid","formats","formatTable","teambuilderFormat","forGen","endsWith","getDefaultResults","call","getBaseResults","legalityFilter","resultType","value","getTable","illegalResults","result","rowType","sort","firstLearnsetid","speciesid","learnsets","baseLearnsetid","baseSpecies","battleOnly","nextLearnsetid","learnsetid","lsetSpecies","next","changesFrom","prevo","canLearn","moveid","getMove","isNonstandard","genChar","learnset","overrideLearnsets","num","String","modFormatTable","gameType","doubles","tableKey","overrideTier","requirePentagon","isDoublesOrBS","tierSet","tiers","map","r","slices","formatSlices","Uber","Regular","OU","UU","RU","NU","PU","ZU","LC","AG","DUber","DOU","DUU","DNU","zuBans","banned","customTierSet","customTiers","bans","unbans","unbanned","headerCount","lastHeader","emptyHeaders","test","row","eggGroups","rowType1","id1","rowType2","id2","pokedex1","pokedex2","baseStats","stat1","stat2","base1","base2","bst1","hp","atk","def","spa","spd","spe","bst2","name1","name2","Error","fullAbilityName","isHackmons","isAAA","abilitySet","isMega","goodAbilities","poorAbilities","badAbilities","abil","rating","fullItemName","itemSet","items","speciesName","speciesSpecific","getItem","itemUser","moveIsNotUseless","abilityid","itemid","moves","weightkg","evos","GOOD_DOUBLES_MOVES","moveData","GOOD_STATUS_MOVES","basePower","GOOD_WEAK_MOVES","flags","charge","recharge","BAD_STRONG_MOVES","isSTABmons","galarBornLegality","sketchMoves","sketch","JSON","parse","stringify","learnsetEntry","nonstandardMoves","isMax","isZ","prevoSpecies","excludedForme","s","forme","otherFormes","formeName","usableMoves","uselessMoves","isUsable","powerTable","frustration","spitup","trumpcard","naturalgift","grassknot","lowkick","gyroball","electroball","flail","reversal","present","wringout","crushgrip","heatcrash","heavyslam","fling","magnitude","beatup","punishment","psywave","nightshade","seismictoss","dragonrage","sonicboom","superfang","endeavor","sheercold","fissure","horndrill","guillotine","modPow1","overrideBP","modPow2","move1","move2","pow1","pow2","modAcc1","overrideAcc","modAcc2","accuracy1","accuracy","accuracy2","modPP1","overridePP","modPP2","pp1","pp","pp2","physical","special","status"],"mappings":"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4B,CAC+4B,OAD/4B,CACw5B,aADx5B,CACu6B,OADv6B,CACg7B,aADh7B,CAC+7B,WAD/7B,CAC48B,OAD58B,CACq9B,WADr9B,CACk+B,WADl+B,CAC++B,MAD/+B,CACu/B,MADv/B,CAC+/B,cAD//B,CAC+gC,eAD/gC,CACgiC,aADhiC,CAC+iC,WAD/iC,CAC4jC,UAD5jC,CACwkC,YADxkC,CACslC,aADtlC,CACqmC,UADrmC,CACinC,aADjnC,CACgoC,aADhoC,CAC+oC,SAD/oC,CAC0pC,SAD1pC,CACqqC,UADrqC,CACirC,cADjrC,CACisC,YADjsC,CAC+sC,aAD/sC,CAC8tC,SAD9tC,CACyuC,cADzuC,CACyvC,SADzvC,CACowC,YADpwC,CACkxC,UADlxC,CAC8xC,cAD9xC,CAC8yC,WAD9yC,C,CAvM/BtP,gB,CA0MWwP,e,CAAkB,CACjC,YADiC,CACnB,YADmB,CACL,SADK,CACM,WADN,CACmB,YADnB,CACiC,cADjC,CACiD,aADjD,CACgE,WADhE,CAC6E,aAD7E,CAC4F,WAD5F,CACyG,gBADzG,CAC2H,aAD3H,CAC0I,YAD1I,CACwJ,QADxJ,CACkK,UADlK,CAC8K,WAD9K,CAC2L,aAD3L,CAC0M,WAD1M,CACuN,WADvN,CACoO,UADpO,CACgP,KADhP,CACuP,UADvP,CACmQ,aADnQ,CACkR,UADlR,CAC8R,SAD9R,CACyS,WADzS,CACsT,YADtT,CACoU,QADpU,CAC8U,WAD9U,CAC2V,WAD3V,CACwW,SADxW,CACmX,aADnX,CACkY,WADlY,CAC+Y,QAD/Y,CACyZ,WADzZ,CACsa,gBADta,CACwb,aADxb,CACuc,aADvc,CACsd,aADtd,CACqe,aADre,CACof,YADpf,CACkgB,aADlgB,CACihB,WADjhB,CAC8hB,gBAD9hB,CACgjB,UADhjB,CAC4jB,YAD5jB,CAC0kB,OAD1kB,CACmlB,cADnlB,CACmmB,YADnmB,CACinB,eADjnB,CACkoB,aADloB,CACipB,QADjpB,CAC2pB,UAD3pB,CACuqB,cADvqB,CACurB,WADvrB,CACosB,aADpsB,CACm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","sourcesContent":["/**\r\n * Search\r\n *\r\n * Code for searching for dex information, used by the Dex and\r\n * Teambuilder.\r\n *\r\n * Dependencies: battledata, search-index\r\n * Optional dependencies: pokedex, moves, items, abilities\r\n *\r\n * @author Guangcong Luo <guangcongluo@gmail.com>\r\n * @license MIT\r\n */\r\n\r\ntype SearchType = (\r\n\t'pokemon' | 'type' | 'tier' | 'move' | 'item' | 'ability' | 'egggroup' | 'category' | 'article'\r\n);\r\n\r\ntype SearchRow = (\r\n\t[SearchType, ID, number?, number?] | ['sortpokemon' | 'sortmove', ''] | ['header' | 'html', string]\r\n);\r\n\r\ntype SearchFilter = [string, string];\r\n\r\n/** ID, SearchType, index (if alias), offset (if offset alias) */\r\ndeclare const BattleSearchIndex: [ID, SearchType, number?, number?][];\r\ndeclare const BattleSearchIndexOffset: any;\r\ndeclare const BattleTeambuilderTable: any;\r\n\r\n/**\r\n * Backend for search UIs.\r\n */\r\n\r\nclass DexSearch {\r\n\tquery = '';\r\n\r\n\t/**\r\n\t * Dex for the mod/generation to search.\r\n\t */\r\n\tdex: ModdedDex = Dex;\r\n\r\n\ttypedSearch: BattleTypedSearch<SearchType> | null = null;\r\n\r\n\tresults: SearchRow[] | null = null;\r\n\texactMatch = false;\r\n\r\n\tstatic typeTable = {\r\n\t\tpokemon: 1,\r\n\t\ttype: 2,\r\n\t\ttier: 3,\r\n\t\tmove: 4,\r\n\t\titem: 5,\r\n\t\tability: 6,\r\n\t\tegggroup: 7,\r\n\t\tcategory: 8,\r\n\t\tarticle: 9,\r\n\t};\r\n\tstatic typeName = {\r\n\t\tpokemon: 'Pok&eacute;mon',\r\n\t\ttype: 'Type',\r\n\t\ttier: 'Tiers',\r\n\t\tmove: 'Moves',\r\n\t\titem: 'Items',\r\n\t\tability: 'Abilities',\r\n\t\tegggroup: 'Egg group',\r\n\t\tcategory: 'Category',\r\n\t\tarticle: 'Article',\r\n\t};\r\n\tfirstPokemonColumn: 'Tier' | 'Number' = 'Number';\r\n\r\n\t/**\r\n\t * Column to sort by. Default is `null`, a smart sort determined by how good\r\n\t * things are according to the base filters, falling back to dex number (for\r\n\t * Pokemon) and name (for everything else).\r\n\t */\r\n\tsortCol: string | null = null;\r\n\r\n\t/**\r\n\t * Filters for the search result. Does not include the two base filters\r\n\t * (format and species).\r\n\t */\r\n\tfilters: SearchFilter[] | null = null;\r\n\r\n\tconstructor(searchType: SearchType | '' = '', formatid = '' as ID, species = '' as ID) {\r\n\t\tthis.setType(searchType, formatid, species);\r\n\t\tif (window.room.curTeam.mod) this.dex = Dex.mod(window.room.curTeam.mod);\r\n\t}\r\n\r\n\tgetTypedSearch(searchType: SearchType | '', format = '' as ID, speciesOrSet: ID | PokemonSet = '' as ID) {\r\n\t\tif (!searchType) return null;\r\n\t\tswitch (searchType) {\r\n\t\tcase 'pokemon': return new BattlePokemonSearch('pokemon', format, speciesOrSet);\r\n\t\tcase 'item': return new BattleItemSearch('item', format, speciesOrSet);\r\n\t\tcase 'move': return new BattleMoveSearch('move', format, speciesOrSet);\r\n\t\tcase 'ability': return new BattleAbilitySearch('ability', format, speciesOrSet);\r\n\t\tcase 'type': return new BattleTypeSearch('type', format, speciesOrSet);\r\n\t\tcase 'category': return new BattleCategorySearch('category', format, speciesOrSet);\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tfind(query: string) {\r\n\t\tquery = toID(query);\r\n\t\tif (this.query === query && this.results) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.query = query;\r\n\t\tif (!query) {\r\n\t\t\tthis.results = this.typedSearch?.getResults(this.filters, this.sortCol) || [];\r\n\t\t} else {\r\n\t\t\tthis.results = this.textSearch(query);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tsetType(searchType: SearchType | '', format = '' as ID, speciesOrSet: ID | PokemonSet = '' as ID) {\r\n\t\t// invalidate caches\r\n\t\tthis.results = null;\r\n\r\n\t\tif (searchType !== this.typedSearch?.searchType) {\r\n\t\t\tthis.filters = null;\r\n\t\t\tthis.sortCol = null;\r\n\t\t}\r\n\t\tthis.typedSearch = this.getTypedSearch(searchType, format, speciesOrSet);\r\n\t\tif (this.typedSearch) this.dex = this.typedSearch.dex;\r\n\t}\r\n\r\n\taddFilter(entry: SearchFilter): boolean {\r\n\t\tif (!this.typedSearch) return false;\r\n\t\tlet [type] = entry;\r\n\t\tif (this.typedSearch.searchType === 'pokemon') {\r\n\t\t\tif (type === this.sortCol) this.sortCol = null;\r\n\t\t\tif (!['type', 'move', 'ability', 'egggroup', 'tier'].includes(type)) return false;\r\n\t\t\tif (type === 'move') entry[1] = toID(entry[1]);\r\n\t\t\tif (!this.filters) this.filters = [];\r\n\t\t\tthis.results = null;\r\n\t\t\tfor (const filter of this.filters) {\r\n\t\t\t\tif (filter[0] === type && filter[1] === entry[1]) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.filters.push(entry);\r\n\t\t\treturn true;\r\n\t\t} else if (this.typedSearch.searchType === 'move') {\r\n\t\t\tif (type === this.sortCol) this.sortCol = null;\r\n\t\t\tif (!['type', 'category', 'pokemon'].includes(type)) return false;\r\n\t\t\tif (type === 'pokemon') entry[1] = toID(entry[1]);\r\n\t\t\tif (!this.filters) this.filters = [];\r\n\t\t\tthis.filters.push(entry);\r\n\t\t\tthis.results = null;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tremoveFilter(entry?: SearchFilter): boolean {\r\n\t\tif (!this.filters) return false;\r\n\t\tif (entry) {\r\n\t\t\tconst filterid = entry.join(':');\r\n\t\t\tlet deleted: string[] | null = null;\r\n\t\t\t// delete specific filter\r\n\t\t\tfor (let i = 0; i < this.filters.length; i++) {\r\n\t\t\t\tif (filterid === this.filters[i].join(':')) {\r\n\t\t\t\t\tdeleted = this.filters[i];\r\n\t\t\t\t\tthis.filters.splice(i, 1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!deleted) return false;\r\n\t\t} else {\r\n\t\t\tthis.filters.pop();\r\n\t\t}\r\n\t\tif (!this.filters.length) this.filters = null;\r\n\t\tthis.results = null;\r\n\t\treturn true;\r\n\t}\r\n\r\n\ttoggleSort(sortCol: string) {\r\n\t\tif (this.sortCol === sortCol) {\r\n\t\t\tthis.sortCol = null;\r\n\t\t} else {\r\n\t\t\tthis.sortCol = sortCol;\r\n\t\t}\r\n\t\tthis.results = null;\r\n\t}\r\n\r\n\tfilterLabel(filterType: string) {\r\n\t\tif (this.typedSearch && this.typedSearch.searchType !== filterType) {\r\n\t\t\treturn 'Filter';\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\tillegalLabel(id: ID) {\r\n\t\treturn this.typedSearch?.illegalReasons?.[id] || null;\r\n\t}\r\n\r\n\tgetTier(species: Species) {\r\n\t\treturn this.typedSearch?.getTier(species) || '';\r\n\t}\r\n\r\n\ttextSearch(query: string): SearchRow[] {\r\n\t\tquery = toID(query);\r\n\r\n\t\tthis.exactMatch = false;\r\n\t\tlet searchType: SearchType | '' = this.typedSearch?.searchType || '';\r\n\r\n\t\t// If searchType exists, we're searching mainly for results of that type.\r\n\t\t// We'll still search for results of other types, but those results\r\n\t\t// will only be used to filter results for that type.\r\n\t\tlet searchTypeIndex = (searchType ? DexSearch.typeTable[searchType] : -1);\r\n\r\n\t\t/** searching for \"Psychic type\" will make the type come up over the move */\r\n\t\tlet qFilterType: 'type' | '' = '';\r\n\t\tif (query.slice(-4) === 'type') {\r\n\t\t\tif ((query.charAt(0).toUpperCase() + query.slice(1, -4)) in window.BattleTypeChart) {\r\n\t\t\t\tquery = query.slice(0, -4);\r\n\t\t\t\tqFilterType = 'type';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// i represents the location of the search index we're looking at\r\n\t\tlet i = DexSearch.getClosest(query);\r\n\t\tthis.exactMatch = (BattleSearchIndex[i][0] === query);\r\n\r\n\t\t// Even with output buffer buckets, we make multiple passes through\r\n\t\t// the search index. searchPasses is a queue of which pass we're on:\r\n\t\t// [passType, i, query]\r\n\r\n\t\t// By doing an alias pass after the normal pass, we ensure that\r\n\t\t// mid-word matches only display after start matches.\r\n\t\tlet passType: SearchPassType | '' = '';\r\n\t\t/**\r\n\t\t * pass types:\r\n\t\t * * '': time to pop the next pass off the searchPasses queue\r\n\t\t * * 'normal': start at i and stop when results no longer start with query\r\n\t\t * * 'alias': like normal, but output aliases instead of non-alias results\r\n\t\t * * 'fuzzy': start at i and stop when you have two results\r\n\t\t * * 'exact': like normal, but stop at i\r\n\t\t */\r\n\t\ttype SearchPassType = 'normal' | 'alias' | 'fuzzy' | 'exact';\r\n\t\t/**\r\n\t\t * [passType, i, query]\r\n\t\t *\r\n\t\t * i = index of BattleSearchIndex to start from\r\n\t\t *\r\n\t\t * By doing an alias pass after the normal pass, we ensure that\r\n\t\t * mid-word matches only display after start matches.\r\n\t\t */\r\n\t\ttype SearchPass = [SearchPassType, number, string];\r\n\t\tlet searchPasses: SearchPass[] = [['normal', i, query]];\r\n\r\n\t\t// For performance reasons, only do an alias pass if query is at\r\n\t\t// least 2 chars long\r\n\t\tif (query.length > 1) searchPasses.push(['alias', i, query]);\r\n\r\n\t\t// If the query matches an official alias in BattleAliases: These are\r\n\t\t// different from the aliases in the search index and are given\r\n\t\t// higher priority. We'll do a normal pass through the index with\r\n\t\t// the alias text before any other passes.\r\n\t\tlet queryAlias;\r\n\t\tif (query in BattleAliases) {\r\n\t\t\tif (['sub', 'tr'].includes(query) || toID(BattleAliases[query]).slice(0, query.length) !== query) {\r\n\t\t\t\tqueryAlias = toID(BattleAliases[query]);\r\n\t\t\t\tlet aliasPassType: SearchPassType = (queryAlias === 'hiddenpower' ? 'exact' : 'normal');\r\n\t\t\t\tsearchPasses.unshift([aliasPassType, DexSearch.getClosest(queryAlias), queryAlias]);\r\n\t\t\t}\r\n\t\t\tthis.exactMatch = true;\r\n\t\t}\r\n\r\n\t\t// If there are no matches starting with query: Do a fuzzy match pass\r\n\t\t// Fuzzy matches will still be shown after alias matches\r\n\t\tif (!this.exactMatch && BattleSearchIndex[i][0].substr(0, query.length) !== query) {\r\n\t\t\t// No results start with this. Do a fuzzy match pass.\r\n\t\t\tlet matchLength = query.length - 1;\r\n\t\t\tif (!i) i++;\r\n\t\t\twhile (matchLength &&\r\n\t\t\t\tBattleSearchIndex[i][0].substr(0, matchLength) !== query.substr(0, matchLength) &&\r\n\t\t\t\tBattleSearchIndex[i - 1][0].substr(0, matchLength) !== query.substr(0, matchLength)) {\r\n\t\t\t\tmatchLength--;\r\n\t\t\t}\r\n\t\t\tlet matchQuery = query.substr(0, matchLength);\r\n\t\t\twhile (i >= 1 && BattleSearchIndex[i - 1][0].substr(0, matchLength) === matchQuery) i--;\r\n\t\t\tsearchPasses.push(['fuzzy', i, '']);\r\n\t\t}\r\n\r\n\t\t// We split the output buffers into 8 buckets.\r\n\t\t// Bucket 0 is usually unused, and buckets 1-7 represent\r\n\t\t// pokemon, types, moves, etc (see typeTable).\r\n\r\n\t\t// When we're done, the buffers are concatenated together to form\r\n\t\t// our results, with each buffer getting its own header, unlike\r\n\t\t// multiple-pass results, which have no header.\r\n\r\n\t\t// Notes:\r\n\t\t// - if we have a searchType, that searchType's buffer will be on top\r\n\t\tlet bufs: SearchRow[][] = [[], [], [], [], [], [], [], [], [], []];\r\n\t\tlet topbufIndex = -1;\r\n\r\n\t\tlet count = 0;\r\n\t\tlet nearMatch = false;\r\n\r\n\t\t/** [type, id, typeIndex] */\r\n\t\tlet instafilter: [SearchType, ID, number] | null = null;\r\n\t\tlet instafilterSort = [0, 1, 2, 5, 4, 3, 6, 7, 8];\r\n\t\tlet illegal = this.typedSearch?.illegalReasons;\r\n\r\n\t\t// We aren't actually looping through the entirety of the searchIndex\r\n\t\tfor (i = 0; i < BattleSearchIndex.length; i++) {\r\n\t\t\tif (!passType) {\r\n\t\t\t\tlet searchPass = searchPasses.shift();\r\n\t\t\t\tif (!searchPass) break;\r\n\t\t\t\tpassType = searchPass[0];\r\n\t\t\t\ti = searchPass[1];\r\n\t\t\t\tquery = searchPass[2];\r\n\t\t\t}\r\n\r\n\t\t\tlet entry = BattleSearchIndex[i];\r\n\t\t\tlet id = entry[0];\r\n\t\t\tlet type = entry[1];\r\n\r\n\t\t\tif (!id) break;\r\n\r\n\t\t\tif (passType === 'fuzzy') {\r\n\t\t\t\t// fuzzy match pass; stop after 2 results\r\n\t\t\t\tif (count >= 2) {\r\n\t\t\t\t\tpassType = '';\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tnearMatch = true;\r\n\t\t\t} else if (passType === 'exact') {\r\n\t\t\t\t// exact pass; stop after 1 result\r\n\t\t\t\tif (count >= 1) {\r\n\t\t\t\t\tpassType = '';\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t} else if (id.substr(0, query.length) !== query) {\r\n\t\t\t\t// regular pass, time to move onto our next match\r\n\t\t\t\tpassType = '';\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tif (entry.length > 2) {\r\n\t\t\t\t// alias entry\r\n\t\t\t\tif (passType !== 'alias') continue;\r\n\t\t\t} else {\r\n\t\t\t\t// normal entry\r\n\t\t\t\tif (passType === 'alias') continue;\r\n\t\t\t}\r\n\r\n\t\t\tlet typeIndex = DexSearch.typeTable[type];\r\n\t\t\t// For performance, with a query length of 1, we only fill the first bucket\r\n\t\t\tif (query.length === 1 && typeIndex !== (searchType ? searchTypeIndex : 1)) continue;\r\n\r\n\t\t\t// For pokemon queries, accept types/tier/abilities/moves/eggroups as filters\r\n\t\t\tif (searchType === 'pokemon' && (typeIndex === 5 || typeIndex > 7)) continue;\r\n\t\t\tif (searchType === 'pokemon' && typeIndex === 3 && this.dex.gen < 8) continue;\r\n\t\t\t// For move queries, accept types/categories as filters\r\n\t\t\tif (searchType === 'move' && ((typeIndex !== 8 && typeIndex > 4) || typeIndex === 3)) continue;\r\n\t\t\t// For move queries in the teambuilder, don't accept pokemon as filters\r\n\t\t\tif (searchType === 'move' && illegal && typeIndex === 1) continue;\r\n\t\t\t// For ability/item queries, don't accept anything else as a filter\r\n\t\t\tif ((searchType === 'ability' || searchType === 'item') && typeIndex !== searchTypeIndex) continue;\r\n\t\t\t// Query was a type name followed 'type'; only show types\r\n\t\t\tif (qFilterType === 'type' && typeIndex !== 2) continue;\r\n\t\t\t// hardcode cases of duplicate non-consecutive aliases\r\n\t\t\tif ((id === 'megax' || id === 'megay') && 'mega'.startsWith(query)) continue;\r\n\r\n\t\t\tlet matchStart = 0;\r\n\t\t\tlet matchEnd = 0;\r\n\t\t\tif (passType === 'alias') {\r\n\t\t\t\t// alias entry\r\n\t\t\t\t// [aliasid, type, originalid, matchStart, originalindex]\r\n\t\t\t\tmatchStart = entry[3]!;\r\n\t\t\t\tlet originalIndex = entry[2]!;\r\n\t\t\t\tif (matchStart) {\r\n\t\t\t\t\tmatchEnd = matchStart + query.length;\r\n\t\t\t\t\tmatchStart += (BattleSearchIndexOffset[originalIndex][matchStart] || '0').charCodeAt(0) - 48;\r\n\t\t\t\t\tmatchEnd += (BattleSearchIndexOffset[originalIndex][matchEnd - 1] || '0').charCodeAt(0) - 48;\r\n\t\t\t\t}\r\n\t\t\t\tid = BattleSearchIndex[originalIndex][0];\r\n\t\t\t} else {\r\n\t\t\t\tmatchEnd = query.length;\r\n\t\t\t\tif (matchEnd) matchEnd += (BattleSearchIndexOffset[i][matchEnd - 1] || '0').charCodeAt(0) - 48;\r\n\t\t\t}\r\n\r\n\t\t\t// some aliases are substrings\r\n\t\t\tif (queryAlias === id && query !== id) continue;\r\n\r\n\t\t\tif (searchType && searchTypeIndex !== typeIndex) {\r\n\t\t\t\t// This is a filter, set it as an instafilter candidate\r\n\t\t\t\tif (!instafilter || instafilterSort[typeIndex] < instafilterSort[instafilter[2]]) {\r\n\t\t\t\t\tinstafilter = [type, id, typeIndex];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// show types above Arceus formes\r\n\t\t\tif (topbufIndex < 0 && searchTypeIndex < 2 && passType === 'alias' && !bufs[1].length && bufs[2].length) {\r\n\t\t\t\ttopbufIndex = 2;\r\n\t\t\t}\r\n\r\n\t\t\t// determine if the element comes from the current mod\r\n\t\t\tconst table = BattleTeambuilderTable[window.room.curTeam.mod];\r\n\t\t\tif (\r\n\t\t\t\ttypeIndex === 1 && (!BattlePokedex[id] || BattlePokedex[id].exists === false) &&\r\n\t\t\t\t(!table || !table.overrideDexInfo || id in table.overrideDexInfo === false)\r\n\t\t\t) continue;\r\n\t\t\telse if (\r\n\t\t\t\ttypeIndex === 5 && (!BattleItems[id] || BattleItems[id].exists === false) &&\r\n\t\t\t\t(!table || !table.overrideItemDesc || id in table.overrideItemDesc === false)\r\n\t\t\t) continue;\r\n\t\t\telse if (\r\n\t\t\t\ttypeIndex === 4 && (!BattleMovedex[id] || BattleMovedex[id].exists === false) &&\r\n\t\t\t\t(!table || !table.overrideMoveInfo || id in table.overrideMoveInfo === false)\r\n\t\t\t) continue;\r\n\t\t\telse if (\r\n\t\t\t\ttypeIndex === 6 && (!BattleAbilities[id] || BattleAbilities[id].exists === false) &&\r\n\t\t\t\t(!table || !table.overrideAbilityDesc || id in table.overrideAbilityDesc === false)\r\n\t\t\t) continue;\r\n\t\t\telse if (\r\n\t\t\t\ttypeIndex === 2 && id.replace(id.charAt(0), id.charAt(0).toUpperCase()) in window.BattleTypeChart === false &&\r\n\t\t\t\t(!table || id.replace(id.charAt(0), id.charAt(0).toUpperCase()) in table.overrideTypeChart === false)\r\n\t\t\t) continue;\r\n\r\n\t\t\tif (illegal && typeIndex === searchTypeIndex) {\r\n\t\t\t\t// Always show illegal results under legal results.\r\n\t\t\t\t// This is done by putting legal results (and the type header)\r\n\t\t\t\t// in bucket 0, and illegal results in the searchType's bucket.\r\n\t\t\t\t// searchType buckets are always on top (but under bucket 0), so\r\n\t\t\t\t// illegal results will be seamlessly right under legal results.\r\n\t\t\t\tif (!bufs[typeIndex].length && !bufs[0].length) {\r\n\t\t\t\t\tbufs[0] = [['header', DexSearch.typeName[type]]];\r\n\t\t\t\t}\r\n\t\t\t\tif (!(id in illegal)) typeIndex = 0;\r\n\t\t\t} else {\r\n\t\t\t\tif (!bufs[typeIndex].length) {\r\n\t\t\t\t\tbufs[typeIndex] = [['header', DexSearch.typeName[type]]];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// don't match duplicate aliases\r\n\t\t\tlet curBufLength = (passType === 'alias' && bufs[typeIndex].length);\r\n\t\t\tif (curBufLength && bufs[typeIndex][curBufLength - 1][1] === id) continue;\r\n\r\n\t\t\tbufs[typeIndex].push([type, id, matchStart, matchEnd]);\r\n\t\t\tcount++;\r\n\t\t}\r\n\r\n\t\tlet topbuf: SearchRow[] = [];\r\n\t\tif (nearMatch) {\r\n\t\t\ttopbuf = [['html', `<em>No exact match found. The closest matches alphabetically are:</em>`]];\r\n\t\t}\r\n\t\tif (topbufIndex >= 0) {\r\n\t\t\ttopbuf = topbuf.concat(bufs[topbufIndex]);\r\n\t\t\tbufs[topbufIndex] = [];\r\n\t\t}\r\n\t\tif (searchTypeIndex >= 0) {\r\n\t\t\ttopbuf = topbuf.concat(bufs[0]);\r\n\t\t\ttopbuf = topbuf.concat(bufs[searchTypeIndex]);\r\n\t\t\tbufs[searchTypeIndex] = [];\r\n\t\t\tbufs[0] = [];\r\n\t\t}\r\n\r\n\t\tif (instafilter && count < 20) {\r\n\t\t\t// Result count is less than 20, so we can instafilter\r\n\t\t\tbufs.push(this.instafilter(searchType, instafilter[0], instafilter[1]));\r\n\t\t}\r\n\r\n\t\tthis.results = Array.prototype.concat.apply(topbuf, bufs);\r\n\t\treturn this.results;\r\n\t}\r\n\tprivate instafilter(searchType: SearchType | '', fType: SearchType, fId: ID): SearchRow[] {\r\n\t\tlet buf: SearchRow[] = [];\r\n\t\tlet illegalBuf: SearchRow[] = [];\r\n\t\tlet illegal = this.typedSearch?.illegalReasons;\r\n\t\t// Change object to look in if using a mod\r\n\t\tlet pokedex = BattlePokedex;\r\n\t\tlet moveDex = BattleMovedex;\r\n\t\tif (window.room.curTeam.mod) {\r\n\t\t\tpokedex = {};\r\n\t\t\tmoveDex = {};\r\n\t\t\tconst table = BattleTeambuilderTable[window.room.curTeam.mod];\r\n\t\t\tfor (const id in table.overrideDexInfo) {\r\n\t\t\t\tpokedex[id] = {\r\n\t\t\t\t\ttypes: table.overrideDexInfo[id].types,\r\n\t\t\t\t\tabilities: table.overrideDexInfo[id].abilities,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tfor (const id in table.overrideMoveInfo) {\r\n\t\t\t\tmoveDex[id] = {\r\n\t\t\t\t\ttype: table.overrideMoveInfo.type,\r\n\t\t\t\t\tcategory: table.overrideMoveInfo.category,\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tpokedex = {...pokedex, ...BattlePokedex};\r\n\t\t\tmoveDex = {...moveDex, ...BattleMovedex};\r\n\t\t}\r\n\t\tif (searchType === 'pokemon') {\r\n\t\t\tswitch (fType) {\r\n\t\t\tcase 'type':\r\n\t\t\t\tlet type = fId.charAt(0).toUpperCase() + fId.slice(1) as TypeName;\r\n\t\t\t\tbuf.push(['header', `${type}-type Pok&eacute;mon`]);\r\n\t\t\t\tfor (let id in pokedex) {\r\n\t\t\t\t\tif (!pokedex[id].types) continue;\r\n\t\t\t\t\tif (this.dex.getSpecies(id).types.includes(type)) {\r\n\t\t\t\t\t\t(illegal && id in illegal ? illegalBuf : buf).push(['pokemon', id as ID]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'ability':\r\n\t\t\t\tlet ability = this.dex.getAbility(fId).name;\r\n\t\t\t\tbuf.push(['header', `${ability} Pok&eacute;mon`]);\r\n\t\t\t\tfor (let id in pokedex) {\r\n\t\t\t\t\tif (!pokedex[id].abilities) continue;\r\n\t\t\t\t\tif (Dex.hasAbility(this.dex.getSpecies(id), ability)) {\r\n\t\t\t\t\t\t(illegal && id in illegal ? illegalBuf : buf).push(['pokemon', id as ID]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t} else if (searchType === 'move') {\r\n\t\t\tswitch (fType) {\r\n\t\t\tcase 'type':\r\n\t\t\t\tlet type = fId.charAt(0).toUpperCase() + fId.slice(1);\r\n\t\t\t\tbuf.push(['header', `${type}-type moves`]);\r\n\t\t\t\tfor (let id in moveDex) {\r\n\t\t\t\t\tif (moveDex[id].type === type) {\r\n\t\t\t\t\t\t(illegal && id in illegal ? illegalBuf : buf).push(['move', id as ID]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'category':\r\n\t\t\t\tlet category = fId.charAt(0).toUpperCase() + fId.slice(1);\r\n\t\t\t\tbuf.push(['header', `${category} moves`]);\r\n\t\t\t\tfor (let id in moveDex) {\r\n\t\t\t\t\tif (moveDex[id].category === category) {\r\n\t\t\t\t\t\t(illegal && id in illegal ? illegalBuf : buf).push(['move', id as ID]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [...buf, ...illegalBuf];\r\n\t}\r\n\r\n\tstatic getClosest(query: string) {\r\n\t\t// binary search through the index!\r\n\t\tlet left = 0;\r\n\t\tlet right = BattleSearchIndex.length - 1;\r\n\t\twhile (right > left) {\r\n\t\t\tlet mid = Math.floor((right - left) / 2 + left);\r\n\t\t\tif (BattleSearchIndex[mid][0] === query && (mid === 0 || BattleSearchIndex[mid - 1][0] !== query)) {\r\n\t\t\t\t// that's us\r\n\t\t\t\treturn mid;\r\n\t\t\t} else if (BattleSearchIndex[mid][0] < query) {\r\n\t\t\t\tleft = mid + 1;\r\n\t\t\t} else {\r\n\t\t\t\tright = mid - 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (left >= BattleSearchIndex.length - 1) left = BattleSearchIndex.length - 1;\r\n\t\telse if (BattleSearchIndex[left + 1][0] && BattleSearchIndex[left][0] < query) left++;\r\n\t\tif (left && BattleSearchIndex[left - 1][0] === query) left--;\r\n\t\treturn left;\r\n\t}\r\n}\r\n\r\nabstract class BattleTypedSearch<T extends SearchType> {\r\n\tsearchType: T;\r\n\t/**\r\n\t * Dex for the mod/generation to search.\r\n\t */\r\n\tdex: ModdedDex = Dex;\r\n\t/**\r\n\t * Format is the first of two base filters. It constrains results to things\r\n\t * legal in the format, and affects the default sort.\r\n\t *\r\n\t * This string specifically normalizes out generation number and the words\r\n\t * \"Doubles\" and \"Let's Go\" from the name.\r\n\t *\r\n\t * mod formats can set the format variable to a standard format, so modFormat\r\n\t * keeps track of the original format in such a case\r\n\t */\r\n\tformat = '' as ID;\r\n\tmodFormat = '' as ID;\r\n\t/**\r\n\t * `species` is the second of two base filters. It constrains results to\r\n\t * things that species can use, and affects the default sort.\r\n\t */\r\n\tspecies = '' as ID;\r\n\t/**\r\n\t * `set` is a pseudo-base filter; it has minor effects on move sorting.\r\n\t * (Abilities/items can affect what moves are sorted as usable.)\r\n\t */\r\n\tset: PokemonSet | null = null;\r\n\tmod = '';\r\n\r\n\tprotected formatType: 'doubles' | 'letsgo' | 'metronome' | 'natdex' | 'nfe' | 'dlc1' | 'dlc1doubles' | null = null;\r\n\r\n\t/**\r\n\t * Cached copy of what the results list would be with only base filters\r\n\t * (i.e. with an empty `query` and `filters`)\r\n\t */\r\n\tbaseResults: SearchRow[] | null = null;\r\n\t/**\r\n\t * Cached copy of all results not in `baseResults` - mostly in case a user\r\n\t * is wondering why a specific result isn't showing up.\r\n\t */\r\n\tbaseIllegalResults: SearchRow[] | null = null;\r\n\tillegalReasons: {[id: string]: string} | null = null;\r\n\tresults: SearchRow[] | null = null;\r\n\r\n\tprotected readonly sortRow: SearchRow | null = null;\r\n\r\n\tconstructor(searchType: T, format = '' as ID, speciesOrSet: ID | PokemonSet = '' as ID) {\r\n\t\tthis.searchType = searchType;\r\n\t\tthis.baseResults = null;\r\n\t\tthis.baseIllegalResults = null;\r\n\t\tthis.modFormat = format;\r\n\t\tlet gen = 8;\r\n\t\tconst ClientMods = window.ModConfig;\r\n\t\tif (format.slice(0, 3) === 'gen') {\r\n\t\t\tgen = (Number(format.charAt(3)) || 6);\r\n\t\t\tlet mod = '';\r\n\t\t\tlet overrideFormat = '';\r\n\t\t\tlet modFormatType = '';\r\n\t\t\tfor (const modid in (ClientMods)) {\r\n\t\t\t\tfor (const formatid in ClientMods[modid].formats) {\r\n\t\t\t\t\tif (formatid === format) {\r\n\t\t\t\t\t\tmod = modid;\r\n\t\t\t\t\t\tconst formatTable = ClientMods[modid].formats[formatid];\r\n\t\t\t\t\t\tif (mod && formatTable.teambuilderFormat) overrideFormat = toID(formatTable.teambuilderFormat);\r\n\t\t\t\t\t\tif (mod && formatTable.formatType) modFormatType = toID(formatTable.formatType);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (mod) {\r\n\t\t\t\tthis.dex = Dex.mod(mod as ID);\r\n\t\t\t\tthis.dex.gen = gen;\r\n\t\t\t\tthis.mod = mod;\r\n\t\t\t} else {\r\n\t\t\t\tthis.dex = Dex.forGen(gen);\r\n\t\t\t}\r\n\t\t\tif (overrideFormat) format = overrideFormat as ID;\r\n\t\t\telse format = (format.slice(4) || 'customgame') as ID;\r\n\t\t\tif (modFormatType) this.formatType = modFormatType as 'doubles' | 'letsgo' | 'metronome' | 'natdex' | 'nfe' | 'dlc1' | 'dlc1doubles' | null;\r\n\t\t} else if (!format) {\r\n\t\t\tthis.dex = Dex;\r\n\t\t}\r\n\t\tif (format.startsWith('dlc1')) {\r\n\t\t\tif (format.includes('doubles')) {\r\n\t\t\t\tthis.formatType = 'dlc1doubles';\r\n\t\t\t} else {\r\n\t\t\t\tthis.formatType = 'dlc1';\r\n\t\t\t}\r\n\t\t\tformat = format.slice(4) as ID;\r\n\t\t}\r\n\t\tif (format === 'vgc2020') this.formatType = 'dlc1doubles';\r\n\t\tif (format.includes('doubles') && this.dex.gen > 4 && !this.formatType) this.formatType = 'doubles';\r\n\t\tif (format.includes('letsgo')) this.formatType = 'letsgo';\r\n\t\tif (format.includes('nationaldex')) {\r\n\t\t\tformat = format.slice(11) as ID;\r\n\t\t\tthis.formatType = 'natdex';\r\n\t\t\tif (!format) format = 'ou' as ID;\r\n\t\t}\r\n\t\tif (this.formatType === 'letsgo') format = format.slice(6) as ID;\r\n\t\tif (format.includes('metronome')) {\r\n\t\t\tthis.formatType = 'metronome';\r\n\t\t}\r\n\t\tif (format.endsWith('nfe')) {\r\n\t\t\tformat = format.slice(3) as ID;\r\n\t\t\tthis.formatType = 'nfe';\r\n\t\t\tif (!format) format = 'ou' as ID;\r\n\t\t}\r\n\t\tthis.format = format;\r\n\r\n\t\tthis.species = '' as ID;\r\n\t\tthis.set = null;\r\n\t\tif (typeof speciesOrSet === 'string') {\r\n\t\t\tif (speciesOrSet) this.species = speciesOrSet;\r\n\t\t} else {\r\n\t\t\tthis.set = speciesOrSet as PokemonSet;\r\n\t\t\tthis.species = toID(this.set.species);\r\n\t\t}\r\n\t\tif (!searchType || !this.set) return;\r\n\t}\r\n\tgetResults(filters?: SearchFilter[] | null, sortCol?: string | null): SearchRow[] {\r\n\t\tif (sortCol === 'type') {\r\n\t\t\treturn [this.sortRow!, ...BattleTypeSearch.prototype.getDefaultResults.call(this)];\r\n\t\t} else if (sortCol === 'category') {\r\n\t\t\treturn [this.sortRow!, ...BattleCategorySearch.prototype.getDefaultResults.call(this)];\r\n\t\t} else if (sortCol === 'ability') {\r\n\t\t\treturn [this.sortRow!, ...BattleAbilitySearch.prototype.getDefaultResults.call(this)];\r\n\t\t}\r\n\t\tif (!this.baseResults) {\r\n\t\t\tthis.baseResults = this.getBaseResults();\r\n\t\t}\r\n\r\n\t\tif (!this.baseIllegalResults) {\r\n\t\t\tconst legalityFilter: {[id: string]: 1} = {};\r\n\t\t\tfor (const [resultType, value] of this.baseResults) {\r\n\t\t\t\tif (resultType === this.searchType) legalityFilter[value] = 1;\r\n\t\t\t}\r\n\t\t\tthis.baseIllegalResults = [];\r\n\t\t\tthis.illegalReasons = {};\r\n\r\n\t\t\tfor (const id in this.getTable()) {\r\n\t\t\t\tif (!(id in legalityFilter)) {\r\n\t\t\t\t\tthis.baseIllegalResults.push([this.searchType, id as ID]);\r\n\t\t\t\t\tthis.illegalReasons[id] = 'Illegal';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet results: SearchRow[];\r\n\t\tlet illegalResults: SearchRow[] | null;\r\n\r\n\t\tif (filters) {\r\n\t\t\tresults = [];\r\n\t\t\tillegalResults = [];\r\n\t\t\tfor (const result of this.baseResults) {\r\n\t\t\t\tif (this.filter(result, filters)) {\r\n\t\t\t\t\tif (results.length && result[0] === 'header' && results[results.length - 1][0] === 'header') {\r\n\t\t\t\t\t\tresults[results.length - 1] = result;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tresults.push(result);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (results.length && results[results.length - 1][0] === 'header') {\r\n\t\t\t\tresults.pop();\r\n\t\t\t}\r\n\t\t\tfor (const result of this.baseIllegalResults) {\r\n\t\t\t\tif (this.filter(result, filters)) {\r\n\t\t\t\t\tillegalResults.push(result);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tresults = [...this.baseResults];\r\n\t\t\tillegalResults = null;\r\n\t\t}\r\n\r\n\t\tif (sortCol) {\r\n\t\t\tresults = results.filter(([rowType]) => rowType === this.searchType);\r\n\t\t\tresults = this.sort(results, sortCol);\r\n\t\t\tif (illegalResults) {\r\n\t\t\t\tillegalResults = illegalResults.filter(([rowType]) => rowType === this.searchType);\r\n\t\t\t\tillegalResults = this.sort(illegalResults, sortCol);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.sortRow) {\r\n\t\t\tresults = [this.sortRow, ...results];\r\n\t\t}\r\n\t\tif (illegalResults && illegalResults.length) {\r\n\t\t\tresults = [...results, ['header', \"Illegal results\"], ...illegalResults];\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\tprotected firstLearnsetid(speciesid: ID) {\r\n\t\tlet learnsets = BattleTeambuilderTable.learnsets;\r\n\t\tif (speciesid in learnsets) return speciesid;\r\n\t\tconst species = this.dex.getSpecies(speciesid);\r\n\t\tif (!species.exists) return '' as ID;\r\n\t\tlet baseLearnsetid = toID(species.baseSpecies);\r\n\t\tif (typeof species.battleOnly === 'string' && species.battleOnly !== species.baseSpecies) {\r\n\t\t\tbaseLearnsetid = toID(species.battleOnly);\r\n\t\t}\r\n\t\tif (baseLearnsetid in learnsets) return baseLearnsetid;\r\n\t\treturn '' as ID;\r\n\t}\r\n\tprotected nextLearnsetid(learnsetid: ID, speciesid: ID) {\r\n\t\tif (learnsetid === 'lycanrocdusk' || (speciesid === 'rockruff' && learnsetid === 'rockruff')) {\r\n\t\t\treturn 'rockruffdusk' as ID;\r\n\t\t}\r\n\t\tconst lsetSpecies = this.dex.getSpecies(learnsetid);\r\n\t\tif (!lsetSpecies.exists) return '' as ID;\r\n\r\n\t\tif (lsetSpecies.id === 'gastrodoneast') return 'gastrodon' as ID;\r\n\t\tif (lsetSpecies.id === 'pumpkaboosuper') return 'pumpkaboo' as ID;\r\n\r\n\t\tconst next = lsetSpecies.battleOnly || lsetSpecies.changesFrom || lsetSpecies.prevo;\r\n\t\tif (next) return toID(next);\r\n\r\n\t\treturn '' as ID;\r\n\t}\r\n\tprotected canLearn(speciesid: ID, moveid: ID) {\r\n\t\tif (this.dex.gen >= 8 && this.dex.getMove(moveid).isNonstandard === 'Past' && this.formatType !== 'natdex') {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tlet genChar = `${this.dex.gen}`;\r\n\t\tif (\r\n\t\t\tthis.format.startsWith('vgc') ||\r\n\t\t\tthis.format.startsWith('battlespot') ||\r\n\t\t\tthis.format.startsWith('battlestadium')\r\n\t\t) {\r\n\t\t\tif (this.dex.gen === 8) {\r\n\t\t\t\tgenChar = 'g';\r\n\t\t\t} else if (this.dex.gen === 7) {\r\n\t\t\t\tgenChar = 'q';\r\n\t\t\t} else if (this.dex.gen === 6) {\r\n\t\t\t\tgenChar = 'p';\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet learnsetid = this.firstLearnsetid(speciesid);\r\n\t\twhile (learnsetid) {\r\n\t\t\tlet learnset = BattleTeambuilderTable.learnsets[learnsetid];\r\n\t\t\tif (this.mod) {\r\n\t\t\t\tconst overrideLearnsets = BattleTeambuilderTable[this.mod].overrideLearnsets;\r\n\t\t\t\tif (overrideLearnsets[learnsetid] && overrideLearnsets[learnsetid][moveid]) learnset = overrideLearnsets[learnsetid];\r\n\t\t\t}\r\n\t\t\tif (learnset && (moveid in learnset) && learnset[moveid].includes(genChar)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tlearnsetid = this.nextLearnsetid(learnsetid, speciesid);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\tgetTier(pokemon: Species) {\r\n\t\tif (this.formatType === 'metronome' || this.formatType === 'natdex') {\r\n\t\t\treturn pokemon.num >= 0 ? String(pokemon.num) : pokemon.tier;\r\n\t\t}\r\n\t\tconst modFormatTable = this.mod ? window.ModConfig[this.mod].formats[this.modFormat] : {};\r\n\t\tlet table = window.BattleTeambuilderTable;\r\n\t\tif (this.mod) table = modFormatTable.gameType !== 'doubles' ? BattleTeambuilderTable[this.mod] : BattleTeambuilderTable[this.mod].doubles;\r\n\t\tconst tableKey = this.formatType === 'doubles' ? `gen${this.dex.gen}doubles` :\r\n\t\t\tthis.formatType === 'letsgo' ? 'letsgo' :\r\n\t\t\tthis.formatType === 'nfe' ? `gen${this.dex.gen}nfe` :\r\n\t\t\tthis.formatType === 'dlc1' ? 'gen8dlc1' :\r\n\t\t\tthis.formatType === 'dlc1doubles' ? 'gen8dlc1doubles' :\r\n\t\t\t`gen${this.dex.gen}`;\r\n\t\tif (table && table[tableKey]) {\r\n\t\t\ttable = table[tableKey];\r\n\t\t}\r\n\t\tif (!table) return pokemon.tier;\r\n\t\tlet id = pokemon.id;\r\n\t\tif (id in table.overrideTier) {\r\n\t\t\treturn table.overrideTier[id];\r\n\t\t}\r\n\t\tif (id.slice(-5) === 'totem' && id.slice(0, -5) in table.overrideTier) {\r\n\t\t\treturn table.overrideTier[id.slice(0, -5)];\r\n\t\t}\r\n\t\tid = toID(pokemon.baseSpecies);\r\n\t\tif (id in table.overrideTier) {\r\n\t\t\treturn table.overrideTier[id];\r\n\t\t}\r\n\t\treturn pokemon.tier;\r\n\t}\r\n\tabstract getTable(): {[id: string]: any};\r\n\tabstract getDefaultResults(): SearchRow[];\r\n\tabstract getBaseResults(): SearchRow[];\r\n\tabstract filter(input: SearchRow, filters: string[][]): boolean;\r\n\tabstract sort(input: SearchRow[], sortCol: string): SearchRow[];\r\n}\r\n\r\nclass BattlePokemonSearch extends BattleTypedSearch<'pokemon'> {\r\n\tsortRow: SearchRow = ['sortpokemon', ''];\r\n\tgetTable() {\r\n\t\tif (!this.mod) return BattlePokedex;\r\n\t\telse return {...BattleTeambuilderTable[this.mod].overrideDexInfo, ...BattlePokedex};\r\n\t}\r\n\tgetDefaultResults(): SearchRow[] {\r\n\t\tlet results: SearchRow[] = [];\r\n\t\tfor (let id in BattlePokedex) {\r\n\t\t\tswitch (id) {\r\n\t\t\tcase 'bulbasaur':\r\n\t\t\t\tresults.push(['header', \"Generation 1\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'chikorita':\r\n\t\t\t\tresults.push(['header', \"Generation 2\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'treecko':\r\n\t\t\t\tresults.push(['header', \"Generation 3\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'turtwig':\r\n\t\t\t\tresults.push(['header', \"Generation 4\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'victini':\r\n\t\t\t\tresults.push(['header', \"Generation 5\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'chespin':\r\n\t\t\t\tresults.push(['header', \"Generation 6\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'rowlet':\r\n\t\t\t\tresults.push(['header', \"Generation 7\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'grookey':\r\n\t\t\t\tresults.push(['header', \"Generation 8\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'missingno':\r\n\t\t\t\tresults.push(['header', \"Glitch\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'tomohawk':\r\n\t\t\t\tresults.push(['header', \"CAP\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'pikachucosplay':\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tresults.push(['pokemon', id as ID]);\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\tgetBaseResults(): SearchRow[] {\r\n\t\tconst format = this.format;\r\n\t\tif (!format) return this.getDefaultResults();\r\n\t\tconst requirePentagon = format === 'battlespotsingles' || format === 'battledoubles' || format.startsWith('vgc');\r\n\t\tlet isDoublesOrBS = this.formatType === 'doubles';\r\n\t\tconst dex = this.dex;\r\n\t\tconst modFormatTable = this.mod ? window.ModConfig[this.mod].formats[this.modFormat] : {};\r\n\t\tlet table = BattleTeambuilderTable;\r\n\t\tif (this.mod) {\r\n\t\t\ttable = modFormatTable.gameType !== 'doubles' ? BattleTeambuilderTable[this.mod] : BattleTeambuilderTable[this.mod].doubles;\r\n\t\t} else if (format.endsWith('cap') || format.endsWith('caplc')) {\r\n\t\t\t// CAP formats always use the singles table\r\n\t\t\tif (dex.gen < 8) {\r\n\t\t\t\ttable = table['gen' + dex.gen];\r\n\t\t\t}\r\n\t\t} else if (dex.gen === 7 && requirePentagon) {\r\n\t\t\ttable = table['gen' + dex.gen + 'vgc'];\r\n\t\t\tisDoublesOrBS = true;\r\n\t\t} else if (table['gen' + dex.gen + 'doubles'] && dex.gen > 4 && this.formatType !== 'letsgo' && this.formatType !== 'dlc1doubles' &&\r\n\t\t\t(\r\n\t\t\tformat.includes('doubles') || format.includes('vgc') || format.includes('triples') ||\r\n\t\t\tformat.endsWith('lc') || format.endsWith('lcuu')\r\n\t\t)) {\r\n\t\t\ttable = table['gen' + dex.gen + 'doubles'];\r\n\t\t\tisDoublesOrBS = true;\r\n\t\t} else if (dex.gen < 8 && !this.formatType) {\r\n\t\t\ttable = table['gen' + dex.gen];\r\n\t\t} else if (this.formatType === 'letsgo') {\r\n\t\t\ttable = table['letsgo'];\r\n\t\t} else if (this.formatType === 'natdex') {\r\n\t\t\ttable = table['natdex'];\r\n\t\t} else if (this.formatType === 'metronome') {\r\n\t\t\ttable = table['metronome'];\r\n\t\t} else if (this.formatType === 'nfe') {\r\n\t\t\ttable = table['gen' + dex.gen + 'nfe'];\r\n\t\t} else if (this.formatType?.startsWith('dlc1')) {\r\n\t\t\tif (this.formatType.includes('doubles')) {\r\n\t\t\t\ttable = table['gen8dlc1doubles'];\r\n\t\t\t} else {\r\n\t\t\t\ttable = table['gen8dlc1'];\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!table.tierSet) {\r\n\t\t\ttable.tierSet = table.tiers.map((r: any) => {\r\n\t\t\t\tif (typeof r === 'string') return ['pokemon', r];\r\n\t\t\t\treturn [r[0], r[1]];\r\n\t\t\t});\r\n\t\t\ttable.tiers = null;\r\n\t\t}\r\n\t\tlet tierSet: SearchRow[] = table.tierSet;\r\n\t\tlet slices: {[k: string]: number} = table.formatSlices;\r\n\t\tif (format === 'ubers' || format === 'uber') tierSet = tierSet.slice(slices.Uber);\r\n\t\telse if (format === 'vgc2017') tierSet = tierSet.slice(slices.Regular);\r\n\t\telse if (format === 'vgc2018') tierSet = tierSet.slice(slices.Regular);\r\n\t\telse if (format.startsWith('vgc2019')) tierSet = tierSet.slice(slices[\"Restricted Legendary\"]);\r\n\t\telse if (format === 'battlespotsingles') tierSet = tierSet.slice(slices.Regular);\r\n\t\telse if (format === 'battlespotdoubles') tierSet = tierSet.slice(slices.Regular);\r\n\t\telse if (format === 'ou') tierSet = tierSet.slice(slices.OU);\r\n\t\telse if (format === 'uu') tierSet = tierSet.slice(slices.UU);\r\n\t\telse if (format === 'ru') tierSet = tierSet.slice(slices.RU || slices.UU);\r\n\t\telse if (format === 'nu') tierSet = tierSet.slice(slices.NU || slices.UU);\r\n\t\telse if (format === 'pu') tierSet = tierSet.slice(slices.PU || slices.NU);\r\n\t\telse if (format === 'zu') tierSet = tierSet.slice(slices.ZU || slices.PU || slices.NU);\r\n\t\telse if (format === 'lc' || format === 'lcuu' || format.startsWith('lc') || (format !== 'caplc' && format.endsWith('lc'))) tierSet = tierSet.slice(slices.LC);\r\n\t\telse if (format === 'cap') tierSet = tierSet.slice(0, slices.Uber).concat(tierSet.slice(slices.OU));\r\n\t\telse if (format === 'caplc') tierSet = tierSet.slice(slices['CAP LC'], slices.Uber).concat(tierSet.slice(slices.LC));\r\n\t\telse if (format === 'anythinggoes' || format.endsWith('ag')) tierSet = tierSet.slice(slices.AG);\r\n\t\telse if (format === 'balancedhackmons' || format.endsWith('bh')) tierSet = tierSet.slice(slices.AG);\r\n\t\telse if (format === 'doublesubers') tierSet = tierSet.slice(slices.DUber);\r\n\t\telse if (format === 'doublesou' && dex.gen > 4) tierSet = tierSet.slice(slices.DOU);\r\n\t\telse if (format === 'doublesuu') tierSet = tierSet.slice(slices.DUU);\r\n\t\telse if (format === 'doublesnu') tierSet = tierSet.slice(slices.DNU || slices.DUU);\r\n\t\telse if (this.formatType === 'letsgo') tierSet = tierSet.slice(slices.Uber);\r\n\t\t// else if (isDoublesOrBS) tierSet = tierSet;\r\n\t\telse if (!isDoublesOrBS) {\r\n\t\t\ttierSet = [\r\n\t\t\t\t...tierSet.slice(slices.OU, slices.UU),\r\n\t\t\t\t...tierSet.slice(slices.AG, slices.Uber),\r\n\t\t\t\t...tierSet.slice(slices.Uber, slices.OU),\r\n\t\t\t\t...tierSet.slice(slices.UU),\r\n\t\t\t];\r\n\t\t} else {\r\n\t\t\ttierSet = [\r\n\t\t\t\t...tierSet.slice(slices.DOU, slices.DUU),\r\n\t\t\t\t...tierSet.slice(slices.DUber, slices.DOU),\r\n\t\t\t\t...tierSet.slice(slices.DUU),\r\n\t\t\t];\r\n\t\t}\r\n\r\n\t\tif (format === 'zu' && dex.gen >= 7) {\r\n\t\t\ttierSet = tierSet.filter(([type, id]) => {\r\n\t\t\t\tif (id in table.zuBans) return false;\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (format === 'vgc2016') {\r\n\t\t\ttierSet = tierSet.filter(([type, id]) => {\r\n\t\t\t\tlet banned = [\r\n\t\t\t\t\t'deoxys', 'deoxysattack', 'deoxysdefense', 'deoxysspeed', 'mew', 'celebi', 'shaymin', 'shayminsky', 'darkrai', 'victini', 'keldeo', 'keldeoresolute', 'meloetta', 'arceus', 'genesect', 'jirachi', 'manaphy', 'phione', 'hoopa', 'hoopaunbound', 'diancie', 'dianciemega',\r\n\t\t\t\t];\r\n\t\t\t\treturn !(banned.includes(id) || id.startsWith('arceus'));\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (this.mod && !table.customTierSet) {\r\n\t\t\ttable.customTierSet = table.customTiers.map((r: any) => {\r\n\t\t\t\tif (typeof r === 'string') return ['pokemon', r];\r\n\t\t\t\treturn [r[0], r[1]];\r\n\t\t\t});\r\n\t\t\ttable.customTiers = null;\r\n\t\t}\r\n\t\tlet customTierSet: SearchRow[] = table.customTierSet;\r\n\t\tif (customTierSet) {\r\n\t\t\ttierSet = customTierSet.concat(tierSet);\r\n\t\t\tif (modFormatTable.bans.length > 0 && !modFormatTable.bans.includes(\"All Pokemon\")) {\r\n\t\t\t\ttierSet = tierSet.filter(([type, id]) => {\r\n\t\t\t\t\tlet banned = modFormatTable.bans;\r\n\t\t\t\t\treturn !(banned.includes(id));\r\n\t\t\t\t});\r\n\t\t\t} else if (modFormatTable.unbans.length > 0 && modFormatTable.bans.includes(\"All Pokemon\")) {\r\n\t\t\t\ttierSet = tierSet.filter(([type, id]) => {\r\n\t\t\t\t\tlet unbanned = modFormatTable.unbans;\r\n\t\t\t\t\treturn (unbanned.includes(id) || type === 'header');\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tlet headerCount = 0;\r\n\t\t\tlet lastHeader = '';\r\n\t\t\tconst emptyHeaders: string[] = [];\r\n\t\t\tfor (const i in tierSet) {\r\n\t\t\t\theaderCount = tierSet[i][0] === 'header' ? headerCount + 1 : 0;\r\n\t\t\t\tif (headerCount > 1) emptyHeaders.push(lastHeader);\r\n\t\t\t\tif (headerCount > 0) lastHeader = tierSet[i][1];\r\n\t\t\t}\r\n\t\t\tif (headerCount === 1) emptyHeaders.push(lastHeader);\r\n\t\t\ttierSet = tierSet.filter(([type, id]) => {\r\n\t\t\t\treturn (type !== 'header' || !emptyHeaders.includes(id));\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Filter out Gmax Pokemon from standard tier selection\r\n\t\tif (!/^(battlestadium|vgc|doublesubers)/g.test(format)) {\r\n\t\t\ttierSet = tierSet.filter(([type, id]) => {\r\n\t\t\t\tif (type === 'pokemon' && !this.mod) {\r\n\t\t\t\t\treturn !id.endsWith('gmax');\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn tierSet;\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]) {\r\n\t\tif (!filters) return true;\r\n\t\tif (row[0] !== 'pokemon') return true;\r\n\t\tconst species = this.dex.getSpecies(row[1]);\r\n\t\tfor (const [filterType, value] of filters) {\r\n\t\t\tswitch (filterType) {\r\n\t\t\tcase 'type':\r\n\t\t\t\tif (species.types[0] !== value && species.types[1] !== value) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'egggroup':\r\n\t\t\t\tif (species.eggGroups[0] !== value && species.eggGroups[1] !== value) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'tier':\r\n\t\t\t\tif (this.getTier(species) !== value) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'ability':\r\n\t\t\t\tif (!Dex.hasAbility(species, value)) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'move':\r\n\t\t\t\tif (!this.canLearn(species.id, value as ID)) return false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string) {\r\n\t\tconst table = !this.mod ? '' : BattleTeambuilderTable[this.mod].overrideDexInfo;\r\n\t\tif (['hp', 'atk', 'def', 'spa', 'spd', 'spe'].includes(sortCol)) {\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tlet pokedex1 = BattlePokedex;\r\n\t\t\t\tlet pokedex2 = BattlePokedex;\r\n\t\t\t\tif (this.mod) {\r\n\t\t\t\t\tif (table[id1] && table[id1].baseStats) pokedex1 = table;\r\n\t\t\t\t\tif (table[id2] && table[id2].baseStats) pokedex2 = table;\r\n\t\t\t\t}\r\n\t\t\t\tconst stat1 = pokedex1[id1].baseStats[sortCol as StatName];\r\n\t\t\t\tconst stat2 = pokedex2[id2].baseStats[sortCol as StatName];\r\n\t\t\t\treturn stat2 - stat1;\r\n\t\t\t});\r\n\t\t} else if (sortCol === 'bst') {\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tlet pokedex1 = BattlePokedex;\r\n\t\t\t\tlet pokedex2 = BattlePokedex;\r\n\t\t\t\tif (this.mod) {\r\n\t\t\t\t\tif (table[id1] && table[id1].baseStats) pokedex1 = table;\r\n\t\t\t\t\tif (table[id2] && table[id2].baseStats) pokedex2 = table;\r\n\t\t\t\t}\r\n\t\t\t\tconst base1 = pokedex1[id1].baseStats;\r\n\t\t\t\tconst base2 = pokedex2[id2].baseStats;\r\n\t\t\t\tconst bst1 = base1.hp + base1.atk + base1.def + base1.spa + base1.spd + base1.spe;\r\n\t\t\t\tconst bst2 = base2.hp + base2.atk + base2.def + base2.spa + base2.spd + base2.spe;\r\n\t\t\t\treturn bst2 - bst1;\r\n\t\t\t});\r\n\t\t} else if (sortCol === 'name') {\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tconst name1 = id1;\r\n\t\t\t\tconst name2 = id2;\r\n\t\t\t\treturn name1 < name2 ? -1 : name1 > name2 ? 1 : 0;\r\n\t\t\t});\r\n\t\t}\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n\r\nclass BattleAbilitySearch extends BattleTypedSearch<'ability'> {\r\n\tgetTable() {\r\n\t\tif (!this.mod) return BattleAbilities;\r\n\t\telse return {...BattleTeambuilderTable[this.mod].fullAbilityName, ...BattleAbilities};\r\n\t}\r\n\tgetDefaultResults(): SearchRow[] {\r\n\t\tconst results: SearchRow[] = [];\r\n\t\tfor (let id in BattleAbilities) {\r\n\t\t\tresults.push(['ability', id as ID]);\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\tgetBaseResults() {\r\n\t\tif (!this.species) return this.getDefaultResults();\r\n\t\tconst format = this.format;\r\n\t\tconst isHackmons = (format.includes('hackmons') || format.endsWith('bh'));\r\n\t\tconst isAAA = (format === 'almostanyability' || format.includes('aaa'));\r\n\t\tconst dex = this.dex;\r\n\t\tlet species = dex.getSpecies(this.species);\r\n\t\tlet abilitySet: SearchRow[] = [['header', \"Abilities\"]];\r\n\r\n\t\tif (species.isMega) {\r\n\t\t\tabilitySet.unshift(['html', `Will be <strong>${species.abilities['0']}</strong> after Mega Evolving.`]);\r\n\t\t\tspecies = dex.getSpecies(species.baseSpecies);\r\n\t\t}\r\n\t\tabilitySet.push(['ability', toID(species.abilities['0'])]);\r\n\t\tif (species.abilities['1']) {\r\n\t\t\tabilitySet.push(['ability', toID(species.abilities['1'])]);\r\n\t\t}\r\n\t\tif (species.abilities['H']) {\r\n\t\t\tabilitySet.push(['header', \"Hidden Ability\"]);\r\n\t\t\tabilitySet.push(['ability', toID(species.abilities['H'])]);\r\n\t\t}\r\n\t\tif (species.abilities['S']) {\r\n\t\t\tabilitySet.push(['header', \"Special Event Ability\"]);\r\n\t\t\tabilitySet.push(['ability', toID(species.abilities['S'])]);\r\n\t\t}\r\n\t\tif (isAAA || format === 'metronomebattle' || isHackmons) {\r\n\t\t\tlet abilities: ID[] = [];\r\n\t\t\tfor (let i in this.getTable()) {\r\n\t\t\t\tconst ability = dex.getAbility(i);\r\n\t\t\t\tif (ability.isNonstandard) continue;\r\n\t\t\t\tif (ability.gen > dex.gen) continue;\r\n\t\t\t\tabilities.push(ability.id);\r\n\t\t\t}\r\n\r\n\t\t\tlet goodAbilities: SearchRow[] = [['header', \"Abilities\"]];\r\n\t\t\tlet poorAbilities: SearchRow[] = [['header', \"Situational Abilities\"]];\r\n\t\t\tlet badAbilities: SearchRow[] = [['header', \"Unviable Abilities\"]];\r\n\t\t\tfor (const ability of abilities.sort().map(abil => dex.getAbility(abil))) {\r\n\t\t\t\tlet rating = ability.rating;\r\n\t\t\t\tif (ability.id === 'normalize') rating = 3;\r\n\t\t\t\tif (rating >= 3) {\r\n\t\t\t\t\tgoodAbilities.push(['ability', ability.id]);\r\n\t\t\t\t} else if (rating >= 2) {\r\n\t\t\t\t\tpoorAbilities.push(['ability', ability.id]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbadAbilities.push(['ability', ability.id]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tabilitySet = [...goodAbilities, ...poorAbilities, ...badAbilities];\r\n\t\t\tif (species.isMega) {\r\n\t\t\t\tif (isAAA) {\r\n\t\t\t\t\tabilitySet.unshift(['html', `Will be <strong>${species.abilities['0']}</strong> after Mega Evolving.`]);\r\n\t\t\t\t}\r\n\t\t\t\t// species is unused after this, so no need to replace\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn abilitySet;\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]) {\r\n\t\tif (!filters) return true;\r\n\t\tif (row[0] !== 'ability') return true;\r\n\t\tconst ability = this.dex.getAbility(row[1]);\r\n\t\tfor (const [filterType, value] of filters) {\r\n\t\t\tswitch (filterType) {\r\n\t\t\tcase 'pokemon':\r\n\t\t\t\tif (!Dex.hasAbility(this.dex.getSpecies(value), ability.name)) return false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string | null): SearchRow[] {\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n\r\nclass BattleItemSearch extends BattleTypedSearch<'item'> {\r\n\tgetTable() {\r\n\t\tif (!this.mod) return BattleItems;\r\n\t\telse return {...BattleTeambuilderTable[this.mod].fullItemName, ...BattleItems};\r\n\t}\r\n\tgetDefaultResults(): SearchRow[] {\r\n\t\tlet table = BattleTeambuilderTable;\r\n\t\tif (this.mod) {\r\n\t\t\ttable = table[this.mod];\r\n\t\t} else if (this.dex.gen < 8) {\r\n\t\t\ttable = table['gen' + this.dex.gen];\r\n\t\t} else if (this.formatType === 'natdex') {\r\n\t\t\ttable = table['natdex'];\r\n\t\t} else if (this.formatType === 'metronome') {\r\n\t\t\ttable = table['metronome'];\r\n\t\t}\r\n\t\tif (!table.itemSet) {\r\n\t\t\ttable.itemSet = table.items.map((r: any) => {\r\n\t\t\t\tif (typeof r === 'string') {\r\n\t\t\t\t\treturn ['item', r];\r\n\t\t\t\t}\r\n\t\t\t\treturn [r[0], r[1]];\r\n\t\t\t});\r\n\t\t\ttable.items = null;\r\n\t\t}\r\n\t\treturn table.itemSet;\r\n\t}\r\n\tgetBaseResults(): SearchRow[] {\r\n\t\tif (!this.species) return this.getDefaultResults();\r\n\t\tconst speciesName = this.dex.getSpecies(this.species).name;\r\n\t\tconst results = this.getDefaultResults();\r\n\t\tconst speciesSpecific: SearchRow[] = [];\r\n\t\tfor (const row of results) {\r\n\t\t\tif (row[0] !== 'item') continue;\r\n\t\t\tif (this.dex.getItem(row[1]).itemUser?.includes(speciesName)) {\r\n\t\t\t\tspeciesSpecific.push(row);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (speciesSpecific.length) {\r\n\t\t\treturn [\r\n\t\t\t\t['header', \"Specific to \" + speciesName],\r\n\t\t\t\t...speciesSpecific,\r\n\t\t\t\t...results,\r\n\t\t\t];\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]) {\r\n\t\tif (!filters) return true;\r\n\t\tif (row[0] !== 'ability') return true;\r\n\t\tconst ability = this.dex.getAbility(row[1]);\r\n\t\tfor (const [filterType, value] of filters) {\r\n\t\t\tswitch (filterType) {\r\n\t\t\tcase 'pokemon':\r\n\t\t\t\tif (!Dex.hasAbility(this.dex.getSpecies(value), ability.name)) return false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string | null): SearchRow[] {\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n\r\nclass BattleMoveSearch extends BattleTypedSearch<'move'> {\r\n\tsortRow: SearchRow = ['sortmove', ''];\r\n\tgetTable() {\r\n\t\tif (!this.mod) return BattleMovedex;\r\n\t\telse return {...BattleTeambuilderTable[this.mod].overrideMoveInfo, ...BattleMovedex};\r\n\t}\r\n\tgetDefaultResults(): SearchRow[] {\r\n\t\tlet results: SearchRow[] = [];\r\n\t\tresults.push(['header', \"Moves\"]);\r\n\t\tfor (let id in BattleMovedex) {\r\n\t\t\tswitch (id) {\r\n\t\t\tcase 'paleowave':\r\n\t\t\t\tresults.push(['header', \"CAP moves\"]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'magikarpsrevenge':\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tresults.push(['move', id as ID]);\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\tprivate moveIsNotUseless(id: ID, species: Species, abilityid: ID, itemid: ID, moves: string[]) {\r\n\t\tconst dex = this.dex;\r\n\t\tif (dex.gen === 1) {\r\n\t\t\t// Usually not useless for Gen 1\r\n\t\t\tif ([\r\n\t\t\t\t'acidarmor', 'amnesia', 'barrier', 'bind', 'blizzard', 'clamp', 'confuseray', 'counter', 'firespin', 'hyperbeam', 'mirrormove', 'pinmissile', 'razorleaf', 'sing', 'slash', 'sludge', 'twineedle', 'wrap',\r\n\t\t\t].includes(id)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\t// Usually useless for Gen 1\r\n\t\t\tif ([\r\n\t\t\t\t'disable', 'firepunch', 'icepunch', 'leechseed', 'quickattack', 'roar', 'thunderpunch', 'toxic', 'triattack', 'whirlwind',\r\n\t\t\t].includes(id)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// Not useless only when certain moves aren't present\r\n\t\t\tswitch (id) {\r\n\t\t\tcase 'bubblebeam': return (!moves.includes('surf') && !moves.includes('blizzard'));\r\n\t\t\tcase 'doubleedge': return !moves.includes('bodyslam');\r\n\t\t\tcase 'doublekick': return !moves.includes('submission');\r\n\t\t\tcase 'megadrain': return !moves.includes('razorleaf') && !moves.includes('surf');\r\n\t\t\tcase 'megakick': return !moves.includes('hyperbeam');\r\n\t\t\tcase 'reflect': return !moves.includes('barrier') && !moves.includes('acidarmor');\r\n\t\t\tcase 'submission': return !moves.includes('highjumpkick');\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.formatType === 'letsgo') {\r\n\t\t\tif (id === 'megadrain') return true;\r\n\t\t}\r\n\r\n\t\tif (this.formatType === 'metronome') {\r\n\t\t\tif (id === 'metronome') return true;\r\n\t\t}\r\n\r\n\t\tif (itemid === 'pidgeotite') abilityid = 'noguard' as ID;\r\n\t\tif (itemid === 'blastoisinite') abilityid = 'megalauncher' as ID;\r\n\t\tif (itemid === 'aerodactylite') abilityid = 'toughclaws' as ID;\r\n\t\tif (itemid === 'glalitite') abilityid = 'refrigerate' as ID;\r\n\r\n\t\tswitch (id) {\r\n\t\tcase 'fakeout': case 'flamecharge': case 'nuzzle': case 'poweruppunch':\r\n\t\t\treturn abilityid !== 'sheerforce';\r\n\t\tcase 'solarbeam': case 'solarblade':\r\n\t\t\treturn ['desolateland', 'drought', 'chlorophyll'].includes(abilityid) || itemid === 'powerherb';\r\n\t\tcase 'dynamicpunch': case 'grasswhistle': case 'inferno': case 'sing': case 'zapcannon':\r\n\t\t\treturn abilityid === 'noguard';\r\n\t\tcase 'heatcrash': case 'heavyslam':\r\n\t\t\treturn species.weightkg >= (species.evos ? 75 : 130);\r\n\r\n\t\tcase 'aerialace':\r\n\t\t\treturn ['technician', 'toughclaws'].includes(abilityid) && !moves.includes('bravebird');\r\n\t\tcase 'ancientpower':\r\n\t\t\treturn ['serenegrace', 'technician'].includes(abilityid) || !moves.includes('powergem');\r\n\t\tcase 'aurawheel':\r\n\t\t\treturn species.baseSpecies === 'Morpeko';\r\n\t\tcase 'bellydrum':\r\n\t\t\treturn moves.includes('aquajet') || moves.includes('extremespeed') ||\r\n\t\t\t\t['iceface', 'unburden'].includes(abilityid);\r\n\t\tcase 'bulletseed':\r\n\t\t\treturn ['skilllink', 'technician'].includes(abilityid);\r\n\t\tcase 'counter':\r\n\t\t\treturn species.baseStats.hp >= 65;\r\n\t\tcase 'darkvoid':\r\n\t\t\treturn dex.gen < 7;\r\n\t\tcase 'drainingkiss':\r\n\t\t\treturn abilityid === 'triage';\r\n\t\tcase 'dualwingbeat':\r\n\t\t\treturn abilityid === 'technician' || !moves.includes('drillpeck');\r\n\t\tcase 'feint':\r\n\t\t\treturn abilityid === 'refrigerate';\r\n\t\tcase 'grassyglide':\r\n\t\t\treturn abilityid === 'grassysurge';\r\n\t\tcase 'gyroball':\r\n\t\t\treturn species.baseStats.spe <= 60;\r\n\t\tcase 'headbutt':\r\n\t\t\treturn abilityid === 'serenegrace';\r\n\t\tcase 'hiddenpowerelectric':\r\n\t\t\treturn (dex.gen < 4 && !moves.includes('thunderpunch')) && !moves.includes('thunderbolt');\r\n\t\tcase 'hiddenpowerfighting':\r\n\t\t\treturn (dex.gen < 4 && !moves.includes('brickbreak')) && !moves.includes('aurasphere') && !moves.includes('focusblast');\r\n\t\tcase 'hiddenpowerfire':\r\n\t\t\treturn (dex.gen < 4 && !moves.includes('firepunch')) && !moves.includes('flamethrower');\r\n\t\tcase 'hiddenpowergrass':\r\n\t\t\treturn !moves.includes('energyball') && !moves.includes('grassknot') && !moves.includes('gigadrain');\r\n\t\tcase 'hiddenpowerice':\r\n\t\t\treturn !moves.includes('icebeam') && (dex.gen < 4 && !moves.includes('icepunch')) || (dex.gen > 5 && !moves.includes('aurorabeam'));\r\n\t\tcase 'hiddenpowerflying':\r\n\t\t\treturn dex.gen < 4 && !moves.includes('drillpeck');\r\n\t\tcase 'hiddenpowerbug':\r\n\t\t\treturn dex.gen < 4 && !moves.includes('megahorn');\r\n\t\tcase 'hiddenpowerpsychic':\r\n\t\t\treturn species.baseSpecies === 'Unown';\r\n\t\tcase 'hyperspacefury':\r\n\t\t\treturn species.id === 'hoopaunbound';\r\n\t\tcase 'hypnosis':\r\n\t\t\treturn (dex.gen < 4 && !moves.includes('sleeppowder')) || (dex.gen > 6 && abilityid === 'baddreams');\r\n\t\tcase 'icywind':\r\n\t\t\t// Keldeo needs Hidden Power for Electric/Ghost\r\n\t\t\treturn species.baseSpecies === 'Keldeo' || this.formatType === 'doubles';\r\n\t\tcase 'infestation':\r\n\t\t\treturn moves.includes('stickyweb');\r\n\t\tcase 'irontail':\r\n\t\t\treturn dex.gen > 5 && !moves.includes('ironhead') && !moves.includes('gunkshot') && !moves.includes('poisonjab');\r\n\t\tcase 'jumpkick':\r\n\t\t\treturn !moves.includes('highjumpkick');\r\n\t\tcase 'leechlife':\r\n\t\t\treturn dex.gen > 6;\r\n\t\tcase 'mysticalfire':\r\n\t\t\treturn dex.gen > 6 && !moves.includes('flamethrower');\r\n\t\tcase 'naturepower':\r\n\t\t\treturn dex.gen === 5;\r\n\t\tcase 'nightslash':\r\n\t\t\treturn !moves.includes('crunch') && !(moves.includes('knockoff') && dex.gen >= 6);\r\n\t\tcase 'petaldance':\r\n\t\t\treturn abilityid === 'owntempo';\r\n\t\tcase 'phantomforce':\r\n\t\t\treturn (!moves.includes('poltergeist') && !moves.includes('shadowclaw')) || this.formatType === 'doubles';\r\n\t\tcase 'poisonfang':\r\n\t\t\treturn species.types.includes('Poison') && !moves.includes('gunkshot') && !moves.includes('poisonjab');\r\n\t\tcase 'relicsong':\r\n\t\t\treturn species.id === 'meloetta';\r\n\t\tcase 'refresh':\r\n\t\t\treturn !moves.includes('aromatherapy') && !moves.includes('healbell');\r\n\t\tcase 'risingvoltage':\r\n\t\t\treturn abilityid === 'electricsurge';\r\n\t\tcase 'rocktomb':\r\n\t\t\treturn abilityid === 'technician';\r\n\t\tcase 'selfdestruct':\r\n\t\t\treturn dex.gen < 5 && !moves.includes('explosion');\r\n\t\tcase 'shadowpunch':\r\n\t\t\treturn abilityid === 'ironfist';\r\n\t\tcase 'smackdown':\r\n\t\t\treturn species.types.includes('Ground');\r\n\t\tcase 'smartstrike':\r\n\t\t\treturn species.types.includes('Steel') && !moves.includes('ironhead');\r\n\t\tcase 'soak':\r\n\t\t\treturn abilityid === 'unaware';\r\n\t\tcase 'steelwing':\r\n\t\t\treturn !moves.includes('ironhead');\r\n\t\tcase 'stompingtantrum':\r\n\t\t\treturn (!moves.includes('earthquake') && !moves.includes('drillrun')) || this.formatType === 'doubles';\r\n\t\tcase 'stunspore':\r\n\t\t\treturn !moves.includes('thunderwave');\r\n\t\tcase 'technoblast':\r\n\t\t\treturn dex.gen > 5 && itemid.endsWith('drive') || itemid === 'dousedrive';\r\n\t\tcase 'teleport':\r\n\t\t\treturn dex.gen > 7;\r\n\t\tcase 'terrainpulse': case 'waterpulse':\r\n\t\t\treturn ['megalauncher', 'technician'].includes(abilityid) && !moves.includes('originpulse');\r\n\t\tcase 'trickroom':\r\n\t\t\treturn species.baseStats.spe <= 100;\r\n\t\t}\r\n\r\n\t\tif (this.formatType === 'doubles' && BattleMoveSearch.GOOD_DOUBLES_MOVES.includes(id)) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t// Custom move added by a mod\r\n\t\tif (this.mod && id in BattleTeambuilderTable[this.mod].overrideMoveInfo) return true;\r\n\t\tconst moveData = BattleMovedex[id];\r\n\t\tif (!moveData) return true;\r\n\t\tif (moveData.category === 'Status') {\r\n\t\t\treturn BattleMoveSearch.GOOD_STATUS_MOVES.includes(id);\r\n\t\t}\r\n\t\tif (moveData.basePower < 75) {\r\n\t\t\treturn BattleMoveSearch.GOOD_WEAK_MOVES.includes(id);\r\n\t\t}\r\n\t\tif (id === 'skydrop') return true;\r\n\t\t// strong moves\r\n\t\tif (moveData.flags?.charge) {\r\n\t\t\treturn itemid === 'powerherb';\r\n\t\t}\r\n\t\tif (moveData.flags?.recharge) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn !BattleMoveSearch.BAD_STRONG_MOVES.includes(id);\r\n\t}\r\n\tstatic readonly GOOD_STATUS_MOVES = [\r\n\t\t'agility', 'aromatherapy', 'auroraveil', 'autotomize', 'banefulbunker', 'bellydrum', 'bulkup', 'calmmind', 'clangoroussoul', 'coil', 'cottonguard', 'courtchange', 'curse', 'defog', 'destinybond', 'detect', 'disable', 'dragondance', 'drainingkiss', 'encore', 'extremeevoboost', 'geomancy', 'glare', 'haze', 'healbell', 'healingwish', 'healorder', 'heartswap', 'honeclaws', 'kingsshield', 'irondefense', 'leechseed', 'lightscreen', 'lovelykiss', 'lunardance', 'magiccoat', 'maxguard', 'milkdrink', 'moonlight', 'morningsun', 'nastyplot', 'naturesmadness', 'noretreat', 'obstruct', 'painsplit', 'partingshot', 'perishsong', 'protect', 'quiverdance', 'recover', 'reflect', 'rest', 'roar', 'rockpolish', 'roost', 'shellsmash', 'shiftgear', 'slackoff', 'sleeppowder', 'sleeptalk', 'softboiled', 'spikes', 'spikyshield', 'spore', 'stealthrock', 'stickyweb', 'strengthsap', 'substitute', 'switcheroo', 'swordsdance', 'synthesis', 'tailglow', 'tailwind', 'taunt', 'thunderwave', 'toxic', 'toxicspikes', 'transform', 'trick', 'whirlwind', 'willowisp', 'wish', 'yawn', 'velvetscales', 'scorchedashes', 'flashfreeze', 'flowstate', 'generate', 'overdrives', 'heartshield', 'vanguard', 'shiverdance', 'desertdance', 'shoreup', 'meateat', 'deepyawn', 'perfectglare', 'groomguard', 'powerscreen', 'refract', 'victorydance', 'courage', 'dreamdance', 'bluenote', 'electroswing', 'subwoofer', \r\n\t] as ID[] as readonly ID[];\r\n\tstatic readonly GOOD_WEAK_MOVES = [\r\n\t\t'accelerock', 'acrobatics', 'aquajet', 'avalanche', 'bonemerang', 'bouncybubble', 'bulletpunch', 'buzzybuzz', 'circlethrow', 'clearsmog', 'doubleironbash', 'dragondarts', 'dragontail', 'facade', 'flipturn', 'freezedry', 'frustration', 'geargrind', 'grassknot', 'gyroball', 'hex', 'iceshard', 'iciclespear', 'knockoff', 'lowkick', 'machpunch', 'nightshade', 'nuzzle', 'pikapapow', 'psychocut', 'pursuit', 'quickattack', 'rapidspin', 'return', 'rockblast', 'scorchingsands', 'seismictoss', 'shadowsneak', 'sizzlyslide', 'storedpower', 'stormthrow', 'suckerpunch', 'superfang', 'surgingstrikes', 'tailslap', 'tripleaxel', 'uturn', 'veeveevolley', 'voltswitch', 'watershuriken', 'weatherball', 'ambush', 'darkroar', 'suddenstrike', 'firekunai', 'flameimpact', 'nostrilflare', 'flashflood', 'aquabolt', 'machbolt', 'metalpincer', 'jetstrike', 'tempest', 'engulf', 'esperwing', 'instantcrush', 'psybolt',\r\n\t] as ID[] as readonly ID[];\r\n\tstatic readonly BAD_STRONG_MOVES = [\r\n\t\t'beakblast', 'belch', 'burnup', 'crushclaw', 'doomdesire', 'dragonrush', 'dreameater', 'eggbomb', 'firepledge', 'flyingpress', 'futuresight', 'grasspledge', 'hyperbeam', 'hyperfang', 'hyperspacehole', 'jawlock', 'landswrath', 'lastresort', 'megakick', 'megapunch', 'mistyexplosion', 'muddywater', 'nightdaze', 'pollenpuff', 'rockclimb', 'selfdestruct', 'shelltrap', 'skyuppercut', 'slam', 'strength', 'submission', 'synchronoise', 'takedown', 'thrash', 'uproar', 'waterpledge', 'coldconversion', 'winterwarning', 'blindswipe', 'darkresolve', 'guardianleaf', 'steelroller'\r\n\t] as ID[] as readonly ID[];\r\n\tstatic readonly GOOD_DOUBLES_MOVES = [\r\n\t\t'allyswitch', 'bulldoze', 'coaching', 'electroweb', 'faketears', 'fling', 'followme', 'healpulse', 'helpinghand', 'junglehealing', 'lifedew', 'muddywater', 'pollenpuff', 'psychup', 'ragepowder', 'safeguard', 'skillswap', 'snipeshot', 'wideguard',\r\n\t] as ID[] as readonly ID[];\r\n\tgetBaseResults() {\r\n\t\tif (!this.species) return this.getDefaultResults();\r\n\t\tconst dex = this.dex;\r\n\t\tlet species = dex.getSpecies(this.species);\r\n\t\tconst format = this.format;\r\n\t\tconst isHackmons = (format.includes('hackmons') || format.endsWith('bh'));\r\n\t\tconst isSTABmons = (format.includes('stabmons') || format === 'staaabmons');\r\n\t\tconst galarBornLegality = (format.includes('battlestadium') || format.startsWith('vgc') && this.dex.gen === 8);\r\n\r\n\t\tconst abilityid = this.set ? toID(this.set.ability) : '' as ID;\r\n\t\tconst itemid = this.set ? toID(this.set.item) : '' as ID;\r\n\r\n\t\tlet learnsetid = this.firstLearnsetid(species.id);\r\n\t\tlet moves: string[] = [];\r\n\t\tlet sketchMoves: string[] = [];\r\n\t\tlet sketch = false;\r\n\t\tlet gen = '' + dex.gen;\r\n\t\twhile (learnsetid) {\r\n\t\t\tlet learnset = BattleTeambuilderTable.learnsets[learnsetid];\r\n\t\t\tif (this.mod) {\r\n\t\t\t\tlearnset = JSON.parse(JSON.stringify(learnset));\r\n\t\t\t\tconst overrideLearnsets = BattleTeambuilderTable[this.mod].overrideLearnsets;\r\n\t\t\t\tif (overrideLearnsets[learnsetid]) {\r\n\t\t\t\t\tfor (const moveid in overrideLearnsets[learnsetid]) learnset[moveid] = overrideLearnsets[learnsetid][moveid];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.formatType === 'letsgo') learnset = BattleTeambuilderTable['letsgo'].learnsets[learnsetid];\r\n\t\t\tif (this.formatType?.startsWith('dlc1')) learnset = BattleTeambuilderTable['gen8dlc1'].learnsets[learnsetid];\r\n\t\t\tif (learnset) {\r\n\t\t\t\tfor (let moveid in learnset) {\r\n\t\t\t\t\tlet learnsetEntry = learnset[moveid];\r\n\t\t\t\t\t/* if (requirePentagon && learnsetEntry.indexOf('p') < 0) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t} */\r\n\t\t\t\t\tif (galarBornLegality && !learnsetEntry.includes('g')) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t} else if (!learnsetEntry.includes(gen)) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.dex.gen >= 8 && this.dex.getMove(moveid) && this.dex.getMove(moveid).isNonstandard === 'Past' && this.formatType !== 'natdex') continue;\r\n\t\t\t\t\tif (this.formatType?.startsWith('dlc1') && BattleTeambuilderTable['gen8dlc1']?.nonstandardMoves.includes(moveid)) continue;\r\n\t\t\t\t\tif (moves.includes(moveid)) continue;\r\n\t\t\t\t\tmoves.push(moveid);\r\n\t\t\t\t\tif (moveid === 'sketch') sketch = true;\r\n\t\t\t\t\tif (moveid === 'hiddenpower') {\r\n\t\t\t\t\t\tmoves.push(\r\n\t\t\t\t\t\t\t'hiddenpowerbug', 'hiddenpowerdark', 'hiddenpowerdragon', 'hiddenpowerelectric', 'hiddenpowerfighting', 'hiddenpowerfire', 'hiddenpowerflying', 'hiddenpowerghost', 'hiddenpowergrass', 'hiddenpowerground', 'hiddenpowerice', 'hiddenpowerpoison', 'hiddenpowerpsychic', 'hiddenpowerrock', 'hiddenpowersteel', 'hiddenpowerwater'\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlearnsetid = this.nextLearnsetid(learnsetid, species.id);\r\n\t\t}\r\n\t\tif (sketch || isHackmons) {\r\n\t\t\tif (isHackmons) moves = [];\r\n\t\t\tfor (let id in BattleMovedex) {\r\n\t\t\t\tif (!format.startsWith('cap') && (id === 'paleowave' || id === 'shadowstrike')) continue;\r\n\t\t\t\tconst move = dex.getMove(id);\r\n\t\t\t\tif (move.gen > dex.gen) continue;\r\n\t\t\t\tif (sketch) {\r\n\t\t\t\t\tif (move.isMax || move.isZ || move.isNonstandard) continue;\r\n\t\t\t\t\tsketchMoves.push(move.id);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (!(dex.gen < 8 || this.formatType === 'natdex') && move.isZ) continue;\r\n\t\t\t\t\tif (typeof move.isMax === 'string') continue;\r\n\t\t\t\t\tif (move.isNonstandard === 'Past' && this.formatType !== 'natdex' && dex.gen === 8) continue;\r\n\t\t\t\t\tmoves.push(move.id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.formatType === 'metronome') moves = ['metronome'];\r\n\t\tif (isSTABmons) {\r\n\t\t\tfor (let id in BattleMovedex) {\r\n\t\t\t\tlet types: string[] = [];\r\n\t\t\t\tlet baseSpecies = dex.getSpecies(species.changesFrom || species.name);\r\n\t\t\t\tif (!species.battleOnly) types.push(...species.types);\r\n\t\t\t\tlet prevo = species.prevo;\r\n\t\t\t\twhile (prevo) {\r\n\t\t\t\t\tconst prevoSpecies = dex.getSpecies(prevo);\r\n\t\t\t\t\ttypes.push(...prevoSpecies.types);\r\n\t\t\t\t\tprevo = prevoSpecies.prevo;\r\n\t\t\t\t}\r\n\t\t\t\tif (species.battleOnly) species = baseSpecies;\r\n\t\t\t\tconst excludedForme = (s: Species) => ['Alola', 'Alola-Totem', 'Galar', 'Galar-Zen'].includes(s.forme);\r\n\t\t\t\tif (baseSpecies.otherFormes && !['Wormadam', 'Urshifu'].includes(baseSpecies.baseSpecies)) {\r\n\t\t\t\t\tif (!excludedForme(species)) types.push(...baseSpecies.types);\r\n\t\t\t\t\tfor (const formeName of baseSpecies.otherFormes) {\r\n\t\t\t\t\t\tconst forme = dex.getSpecies(formeName);\r\n\t\t\t\t\t\tif (!forme.battleOnly && !excludedForme(forme)) types.push(...forme.types);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tconst move = Dex.getMove(id);\r\n\t\t\t\tif (!types.includes(move.type)) continue;\r\n\t\t\t\tif (moves.includes(move.id)) continue;\r\n\t\t\t\tif (move.gen > dex.gen) continue;\r\n\t\t\t\tif (move.isZ || move.isMax || move.isNonstandard) continue;\r\n\t\t\t\tmoves.push(id);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tmoves.sort();\r\n\t\tsketchMoves.sort();\r\n\r\n\t\tlet usableMoves: SearchRow[] = [];\r\n\t\tlet uselessMoves: SearchRow[] = [];\r\n\t\tfor (const id of moves) {\r\n\t\t\tconst isUsable = this.moveIsNotUseless(id as ID, species, abilityid, itemid, moves);\r\n\t\t\tif (isUsable) {\r\n\t\t\t\tif (!usableMoves.length) usableMoves.push(['header', \"Moves\"]);\r\n\t\t\t\tusableMoves.push(['move', id as ID]);\r\n\t\t\t} else {\r\n\t\t\t\tif (!uselessMoves.length) uselessMoves.push(['header', \"Usually useless moves\"]);\r\n\t\t\t\tuselessMoves.push(['move', id as ID]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (sketchMoves.length) {\r\n\t\t\tusableMoves.push(['header', \"Sketched moves\"]);\r\n\t\t\tuselessMoves.push(['header', \"Useless sketched moves\"]);\r\n\t\t}\r\n\t\tfor (const id of sketchMoves) {\r\n\t\t\tconst isUsable = this.moveIsNotUseless(id as ID, species, abilityid, itemid, sketchMoves);\r\n\t\t\tif (isUsable) {\r\n\t\t\t\tusableMoves.push(['move', id as ID]);\r\n\t\t\t} else {\r\n\t\t\t\tuselessMoves.push(['move', id as ID]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [...usableMoves, ...uselessMoves];\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]) {\r\n\t\tif (!filters) return true;\r\n\t\tif (row[0] !== 'move') return true;\r\n\t\tconst move = this.dex.getMove(row[1]);\r\n\t\tfor (const [filterType, value] of filters) {\r\n\t\t\tswitch (filterType) {\r\n\t\t\tcase 'type':\r\n\t\t\t\tif (move.type !== value) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'category':\r\n\t\t\t\tif (move.category !== value) return false;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'pokemon':\r\n\t\t\t\tif (!this.canLearn(value as ID, move.id)) return false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string): SearchRow[] {\r\n\t\tswitch (sortCol) {\r\n\t\tcase 'power':\r\n\t\t\tlet powerTable: {[id: string]: number | undefined} = {\r\n\t\t\t\treturn: 102, frustration: 102, spitup: 300, trumpcard: 200, naturalgift: 80, grassknot: 120,\r\n\t\t\t\tlowkick: 120, gyroball: 150, electroball: 150, flail: 200, reversal: 200, present: 120,\r\n\t\t\t\twringout: 120, crushgrip: 120, heatcrash: 120, heavyslam: 120, fling: 130, magnitude: 150,\r\n\t\t\t\tbeatup: 24, punishment: 1020, psywave: 1250, nightshade: 1200, seismictoss: 1200,\r\n\t\t\t\tdragonrage: 1140, sonicboom: 1120, superfang: 1350, endeavor: 1399, sheercold: 1501,\r\n\t\t\t\tfissure: 1500, horndrill: 1500, guillotine: 1500,\r\n\t\t\t};\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tconst modPow1 = this.mod ? BattleTeambuilderTable[this.mod].overrideBP[id1] : null;\r\n\t\t\t\tconst modPow2 = this.mod ? BattleTeambuilderTable[this.mod].overrideBP[id2] : null;\r\n\t\t\t\tlet move1 = BattleMovedex[id1];\r\n\t\t\t\tlet move2 = BattleMovedex[id2];\r\n\t\t\t\tlet pow1 = modPow1 || move1.basePower || powerTable[id1] || (move1.category === 'Status' ? -1 : 1400);\r\n\t\t\t\tlet pow2 = modPow2 || move2.basePower || powerTable[id2] || (move2.category === 'Status' ? -1 : 1400);\r\n\t\t\t\treturn pow2 - pow1;\r\n\t\t\t});\r\n\t\tcase 'accuracy':\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tconst modAcc1 = this.mod ? BattleTeambuilderTable[this.mod].overrideAcc[id1] : null;\r\n\t\t\t\tconst modAcc2 = this.mod ? BattleTeambuilderTable[this.mod].overrideAcc[id2] : null;\r\n\t\t\t\tlet accuracy1 = modAcc1 || BattleMovedex[id1].accuracy || 0;\r\n\t\t\t\tlet accuracy2 = modAcc2 || BattleMovedex[id2].accuracy || 0;\r\n\t\t\t\tif (accuracy1 === true) accuracy1 = 101;\r\n\t\t\t\tif (accuracy2 === true) accuracy2 = 101;\r\n\t\t\t\treturn accuracy2 - accuracy1;\r\n\t\t\t});\r\n\t\tcase 'pp':\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tconst modPP1 = this.mod ? BattleTeambuilderTable[this.mod].overridePP[id1] : null;\r\n\t\t\t\tconst modPP2 = this.mod ? BattleTeambuilderTable[this.mod].overridePP[id2] : null;\r\n\t\t\t\tlet pp1 = modPP1 || BattleMovedex[id1].pp || 0;\r\n\t\t\t\tlet pp2 = modPP2 || BattleMovedex[id2].pp || 0;\r\n\t\t\t\treturn pp2 - pp1;\r\n\t\t\t});\r\n\t\tcase 'name':\r\n\t\t\treturn results.sort(([rowType1, id1], [rowType2, id2]) => {\r\n\t\t\t\tconst name1 = id1;\r\n\t\t\t\tconst name2 = id2;\r\n\t\t\t\treturn name1 < name2 ? -1 : name1 > name2 ? 1 : 0;\r\n\t\t\t});\r\n\t\t}\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n\r\nclass BattleCategorySearch extends BattleTypedSearch<'category'> {\r\n\tgetTable() {\r\n\t\treturn {physical: 1, special: 1, status: 1};\r\n\t}\r\n\tgetDefaultResults(): SearchRow[] {\r\n\t\treturn [\r\n\t\t\t['category', 'physical' as ID],\r\n\t\t\t['category', 'special' as ID],\r\n\t\t\t['category', 'status' as ID],\r\n\t\t];\r\n\t}\r\n\tgetBaseResults() {\r\n\t\treturn this.getDefaultResults();\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]): boolean {\r\n\t\tthrow new Error(\"invalid filter\");\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string | null): SearchRow[] {\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n\r\nclass BattleTypeSearch extends BattleTypedSearch<'type'> {\r\n\tgetTable() {\r\n\t\tif (!this.mod) return window.BattleTypeChart;\r\n\t\telse return {...BattleTeambuilderTable[this.mod].overrideTypeChart, ...window.BattleTypeChart};\r\n\t}\r\n\tgetDefaultResults(): SearchRow[] {\r\n\t\tconst results: SearchRow[] = [];\r\n\t\tfor (let id in window.BattleTypeChart) {\r\n\t\t\tresults.push(['type', id as ID]);\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\tgetBaseResults() {\r\n\t\treturn this.getDefaultResults();\r\n\t}\r\n\tfilter(row: SearchRow, filters: string[][]): boolean {\r\n\t\tthrow new Error(\"invalid filter\");\r\n\t}\r\n\tsort(results: SearchRow[], sortCol: string | null): SearchRow[] {\r\n\t\tthrow new Error(\"invalid sortcol\");\r\n\t}\r\n}\r\n"],"file":"battle-dex-search.js"}