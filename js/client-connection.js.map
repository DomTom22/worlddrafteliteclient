{"version":3,"sources":["../src/client-connection.ts"],"names":["PSConnection","socket","connected","queue","connect","server","PS","port","protocol","url","host","prefix","SockJS","timeout","onopen","console","log","msg","send","update","onmessage","e","receive","data","onclose","isOffline","roomid","rooms","push","connection","PSLoginServer","query","id","location","pathname","endsWith","Config","routes","client","POKEMON_SHOWDOWN_TESTCLIENT_KEY","sid","replace","Net","get","method","body","then","res","JSON","parse","slice","HttpError","message","statusCode","name","Error","captureStackTrace","err","NetRequest","uri","opts","Promise","resolve","reject","xhr","XMLHttpRequest","includes","encodeQuery","open","onreadystatechange","DONE","readyState","status","responseText","statusText","setRequestHeader","post","urlencodedData","key","encodeURIComponent"],"mappings":"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","sourcesContent":["/**\r\n * Connection library\r\n *\r\n * @author Guangcong Luo <guangcongluo@gmail.com>\r\n * @license MIT\r\n */\r\n\r\ndeclare var SockJS: any;\r\n\r\nclass PSConnection {\r\n\tsocket: any = null;\r\n\tconnected = false;\r\n\tqueue = [] as string[];\r\n\tconstructor() {\r\n\t\tthis.connect();\r\n\t}\r\n\tconnect() {\r\n\t\tconst server = PS.server;\r\n\t\tconst port = server.protocol === 'https' ? '' : ':' + server.port;\r\n\t\tconst url = server.protocol + '://' + server.host + port + server.prefix;\r\n\t\tconst socket = this.socket = new SockJS(url, [], {timeout: 5 * 60 * 1000});\r\n\t\tsocket.onopen = () => {\r\n\t\t\tconsole.log('\\u2705 (CONNECTED)');\r\n\t\t\tthis.connected = true;\r\n\t\t\tPS.connected = true;\r\n\t\t\tfor (const msg of this.queue) socket.send(msg);\r\n\t\t\tthis.queue = [];\r\n\t\t\tPS.update();\r\n\t\t};\r\n\t\tsocket.onmessage = (e: MessageEvent) => {\r\n\t\t\tPS.receive('' + e.data);\r\n\t\t};\r\n\t\tsocket.onclose = () => {\r\n\t\t\tconsole.log('\\u2705 (DISCONNECTED)');\r\n\t\t\tthis.connected = false;\r\n\t\t\tPS.connected = false;\r\n\t\t\tPS.isOffline = true;\r\n\t\t\tfor (const roomid in PS.rooms) {\r\n\t\t\t\tPS.rooms[roomid]!.connected = false;\r\n\t\t\t}\r\n\t\t\tthis.socket = null;\r\n\t\t\tPS.update();\r\n\t\t};\r\n\t}\r\n\tsend(msg: string) {\r\n\t\tif (!this.connected) {\r\n\t\t\tthis.queue.push(msg);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.socket.send(msg);\r\n\t}\r\n}\r\n\r\nPS.connection = new PSConnection();\r\n\r\nconst PSLoginServer = new class {\r\n\tquery(data: PostData): Promise<{[k: string]: any} | null> {\r\n\t\tlet url = '/~~' + PS.server.id + '/action.php';\r\n\t\tif (location.pathname.endsWith('.html')) {\r\n\t\t\turl = 'https://' + Config.routes.client + url;\r\n\t\t\t// @ts-ignore\r\n\t\t\tif (typeof POKEMON_SHOWDOWN_TESTCLIENT_KEY === 'string') {\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tdata.sid = POKEMON_SHOWDOWN_TESTCLIENT_KEY.replace(/\\%2C/g, ',');\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Net(url).get({method: data ? 'POST' : 'GET', body: data}).then(\r\n\t\t\tres => res ? JSON.parse(res.slice(1)) : null\r\n\t\t).catch(\r\n\t\t\t() => null\r\n\t\t);\r\n\t}\r\n};\r\n\r\ninterface PostData {\r\n\t[key: string]: string | number;\r\n}\r\ninterface NetRequestOptions {\r\n\tmethod?: 'GET' | 'POST';\r\n\tbody?: string | PostData;\r\n\tquery?: PostData;\r\n}\r\nclass HttpError extends Error {\r\n\tstatusCode?: number;\r\n\tbody: string;\r\n\tconstructor(message: string, statusCode: number | undefined, body: string) {\r\n\t\tsuper(message);\r\n\t\tthis.name = 'HttpError';\r\n\t\tthis.statusCode = statusCode;\r\n\t\tthis.body = body;\r\n\t\ttry {\r\n\t\t\t(Error as any).captureStackTrace(this, HttpError);\r\n\t\t} catch (err) {}\r\n\t}\r\n}\r\nclass NetRequest {\r\n\turi: string;\r\n\tconstructor(uri: string) {\r\n\t\tthis.uri = uri;\r\n\t}\r\n\r\n\t/**\r\n\t * Makes a basic http/https request to the URI.\r\n\t * Returns the response data.\r\n\t *\r\n\t * Will throw if the response code isn't 200 OK.\r\n\t *\r\n\t * @param opts request opts\r\n\t */\r\n\tget(opts: NetRequestOptions = {}): Promise<string> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst xhr = new XMLHttpRequest();\r\n\t\t\tlet uri = this.uri;\r\n\t\t\tif (opts.query) {\r\n\t\t\t\turi += (uri.includes('?') ? '&' : '?') + Net.encodeQuery(opts.query);\r\n\t\t\t}\r\n\t\t\txhr.open(opts.method || 'GET', uri);\r\n\t\t\txhr.onreadystatechange = function () {\r\n\t\t\t\tconst DONE = 4;\r\n\t\t\t\tif (xhr.readyState === DONE) {\r\n\t\t\t\t\tif (xhr.status === 200) {\r\n\t\t\t\t\t\tresolve(xhr.responseText || '');\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst err = new HttpError(xhr.statusText || \"Connection error\", xhr.status, xhr.responseText);\r\n\t\t\t\t\treject(err);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tif (opts.body) {\r\n\t\t\t\txhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n\t\t\t\txhr.send(Net.encodeQuery(opts.body));\r\n\t\t\t} else {\r\n\t\t\t\txhr.send();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Makes a http/https POST request to the given link.\r\n\t * @param opts request opts\r\n\t * @param body POST body\r\n\t */\r\n\tpost(opts: Omit<NetRequestOptions, 'body'>, body: PostData | string): Promise<string>;\r\n\t/**\r\n\t * Makes a http/https POST request to the given link.\r\n\t * @param opts request opts\r\n\t */\r\n\tpost(opts?: NetRequestOptions): Promise<string>;\r\n\tpost(opts: NetRequestOptions = {}, body?: PostData | string) {\r\n\t\tif (!body) body = opts.body;\r\n\t\treturn this.get({\r\n\t\t\t...opts,\r\n\t\t\tmethod: 'POST',\r\n\t\t\tbody,\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction Net(uri: string) {\r\n\treturn new NetRequest(uri);\r\n}\r\n\r\nNet.encodeQuery = function (data: string | PostData) {\r\n\tif (typeof data === 'string') return data;\r\n\tlet urlencodedData = '';\r\n\tfor (const key in data) {\r\n\t\tif (urlencodedData) urlencodedData += '&';\r\n\t\turlencodedData += encodeURIComponent(key) + '=' + encodeURIComponent((data as any)[key]);\r\n\t}\r\n\treturn urlencodedData;\r\n};\r\n"],"file":"client-connection.js"}